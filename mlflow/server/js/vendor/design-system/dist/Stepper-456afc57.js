import React__default, { createContext, useContext, useMemo, useEffect, useState, forwardRef, useRef, useLayoutEffect, useImperativeHandle, useCallback } from 'react';
import { jsx, Fragment, jsxs } from '@emotion/react/jsx-runtime';
import { useTheme, ThemeProvider, css, keyframes } from '@emotion/react';
import { notification, ConfigProvider, Button as Button$1, Typography as Typography$1, Input as Input$2 } from 'antd';
import AntDIcon from '@ant-design/icons';
import _isNil from 'lodash/isNil';
import _endsWith from 'lodash/endsWith';
import _isBoolean from 'lodash/isBoolean';
import _isNumber from 'lodash/isNumber';
import _isString from 'lodash/isString';
import _mapValues from 'lodash/mapValues';
import _memoize from 'lodash/memoize';
import unitless from '@emotion/unitless';

/**
 * Used to hide text visually, but still be readable by screen-readers
 * and other assistive devices.
 *
 * https://www.tpgi.com/the-anatomy-of-visually-hidden/
 */
const visuallyHidden = {
  '&:not(:focus):not(:active)': {
    clip: 'rect(0 0 0 0)',
    clipPath: 'inset(50%)',
    height: '1px',
    overflow: 'hidden',
    position: 'absolute',
    whiteSpace: 'nowrap',
    width: '1px'
  }
};

const DEFAULT_SPACING_UNIT = 8;
const MODAL_PADDING = 40;
const spacing = {
  xs: DEFAULT_SPACING_UNIT / 2,
  sm: DEFAULT_SPACING_UNIT,
  md: DEFAULT_SPACING_UNIT * 2,
  lg: DEFAULT_SPACING_UNIT * 3
};

// Less variables that are used by AntD
({
  defaultPaddingLg: spacing.lg,
  defaultPaddingMd: spacing.md,
  defaultPaddingSm: spacing.sm,
  defaultPaddingXs: spacing.sm,
  defaultPaddingXss: spacing.xs,
  paddingLg: spacing.md,
  // TODO: Check if there is a better alternative with team
  paddingMd: spacing.sm,
  paddingSm: spacing.sm,
  paddingXs: spacing.xs,
  paddingXss: 0,
  marginSm: 12,
  marginLg: spacing.lg,
  // Button
  btnPaddingHorizontalBase: DEFAULT_SPACING_UNIT * 2,
  btnPaddingHorizontalLg: DEFAULT_SPACING_UNIT * 2,
  btnPaddingHorizontalSm: DEFAULT_SPACING_UNIT * 2,
  // Input
  inputPaddingHorizontal: DEFAULT_SPACING_UNIT * 1.5,
  inputPaddingHorizontalBase: DEFAULT_SPACING_UNIT * 1.5,
  inputPaddingHorizontalSm: DEFAULT_SPACING_UNIT * 1.5,
  inputPaddingHorizontalLg: DEFAULT_SPACING_UNIT * 1.5,
  inputPaddingVertical: spacing.xs + 1,
  inputPaddingVerticalBase: spacing.xs + 1,
  inputPaddingVerticalSm: spacing.xs + 1,
  inputPaddingVerticalLg: spacing.xs + 1,
  // Modal
  modalPadding: MODAL_PADDING,
  modalLessPadding: MODAL_PADDING - 20,
  modalHeaderPadding: `${MODAL_PADDING}px ${MODAL_PADDING}px ${MODAL_PADDING - 20}px`,
  modalHeaderCloseSize: MODAL_PADDING * 2 + 22,
  modalHeaderBorderWidth: 0,
  modalBodyPadding: `0 ${MODAL_PADDING}px`,
  modalFooterPaddingVertical: 0,
  modalFooterPaddingHorizontal: 0,
  modalFooterBorderWidth: 0,
  // Switch
  switchPadding: 0,
  switchHeight: 16,
  switchMinWidth: 28,
  switchPinSize: 14
});
var spacing$1 = spacing;

// eslint-disable-next-line import/no-anonymous-default-export
var antdVars = {
  // IMPORTANT: Do not read this directly from components. Use `React.useContext`.
  'ant-prefix': 'du-bois'
};

const heightBase = 40;
const borderWidth = 1;
const antdGeneralVariables = {
  classnamePrefix: antdVars['ant-prefix'],
  iconfontCssPrefix: 'anticon',
  borderRadiusBase: 4,
  borderWidth: borderWidth,
  heightSm: 32,
  heightBase: heightBase,
  iconSize: 24,
  iconFontSize: 16,
  buttonHeight: heightBase,
  // Height available within button (for label and icon). Same for middle and small buttons.
  buttonInnerHeight: heightBase - spacing$1.sm * 2 - borderWidth * 2
};
const shadowLightRgb = '31, 39, 45';
const shadowDarkRgb = '0, 0, 0';
const getShadowVariables = isDarkMode => {
  if (isDarkMode) {
    return {
      shadowLow: `0px 4px 16px rgba(${shadowDarkRgb}, 0.12)`,
      shadowHigh: `0px 8px 24px rgba(${shadowDarkRgb}, 0.2);`
    };
  } else {
    return {
      shadowLow: `0px 4px 16px rgba(${shadowLightRgb}, 0.12)`,
      shadowHigh: `0px 8px 24px rgba(${shadowLightRgb}, 0.2)`
    };
  }
};

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

let ValidSemanticColors = /*#__PURE__*/function (ValidSemanticColors) {
  ValidSemanticColors["ActionDangerDefaultBackgroundDefault"] = "actionDangerDefaultBackgroundDefault";
  ValidSemanticColors["ActionDangerDefaultBackgroundHover"] = "actionDangerDefaultBackgroundHover";
  ValidSemanticColors["ActionDangerDefaultBackgroundPress"] = "actionDangerDefaultBackgroundPress";
  ValidSemanticColors["ActionDangerDefaultBorderDefault"] = "actionDangerDefaultBorderDefault";
  ValidSemanticColors["ActionDangerDefaultBorderHover"] = "actionDangerDefaultBorderHover";
  ValidSemanticColors["ActionDangerDefaultBorderPress"] = "actionDangerDefaultBorderPress";
  ValidSemanticColors["ActionDangerDefaultTextDefault"] = "actionDangerDefaultTextDefault";
  ValidSemanticColors["ActionDangerDefaultTextHover"] = "actionDangerDefaultTextHover";
  ValidSemanticColors["ActionDangerDefaultTextPress"] = "actionDangerDefaultTextPress";
  ValidSemanticColors["ActionDangerPrimaryBackgroundDefault"] = "actionDangerPrimaryBackgroundDefault";
  ValidSemanticColors["ActionDangerPrimaryBackgroundHover"] = "actionDangerPrimaryBackgroundHover";
  ValidSemanticColors["ActionDangerPrimaryBackgroundPress"] = "actionDangerPrimaryBackgroundPress";
  ValidSemanticColors["ActionDangerPrimaryText"] = "actionDangerPrimaryText";
  ValidSemanticColors["ActionDefaultBackgroundDefault"] = "actionDefaultBackgroundDefault";
  ValidSemanticColors["ActionDefaultBackgroundHover"] = "actionDefaultBackgroundHover";
  ValidSemanticColors["ActionDefaultBackgroundPress"] = "actionDefaultBackgroundPress";
  ValidSemanticColors["ActionDefaultBorderDefault"] = "actionDefaultBorderDefault";
  ValidSemanticColors["ActionDefaultBorderFocus"] = "actionDefaultBorderFocus";
  ValidSemanticColors["ActionDefaultBorderHover"] = "actionDefaultBorderHover";
  ValidSemanticColors["ActionDefaultBorderPress"] = "actionDefaultBorderPress";
  ValidSemanticColors["ActionDefaultIconDefault"] = "actionDefaultIconDefault";
  ValidSemanticColors["ActionDefaultIconHover"] = "actionDefaultIconHover";
  ValidSemanticColors["ActionDefaultIconPress"] = "actionDefaultIconPress";
  ValidSemanticColors["ActionDefaultTextDefault"] = "actionDefaultTextDefault";
  ValidSemanticColors["ActionDefaultTextHover"] = "actionDefaultTextHover";
  ValidSemanticColors["ActionDefaultTextPress"] = "actionDefaultTextPress";
  ValidSemanticColors["ActionDisabledBackground"] = "actionDisabledBackground";
  ValidSemanticColors["ActionDisabledBorder"] = "actionDisabledBorder";
  ValidSemanticColors["ActionDisabledText"] = "actionDisabledText";
  ValidSemanticColors["ActionIconBackgroundDefault"] = "actionIconBackgroundDefault";
  ValidSemanticColors["ActionIconBackgroundHover"] = "actionIconBackgroundHover";
  ValidSemanticColors["ActionIconBackgroundPress"] = "actionIconBackgroundPress";
  ValidSemanticColors["ActionIconIconDefault"] = "actionIconIconDefault";
  ValidSemanticColors["ActionIconIconHover"] = "actionIconIconHover";
  ValidSemanticColors["ActionIconIconPress"] = "actionIconIconPress";
  ValidSemanticColors["ActionLinkDefault"] = "actionLinkDefault";
  ValidSemanticColors["ActionLinkHover"] = "actionLinkHover";
  ValidSemanticColors["ActionLinkPress"] = "actionLinkPress";
  ValidSemanticColors["ActionPrimaryBackgroundDefault"] = "actionPrimaryBackgroundDefault";
  ValidSemanticColors["ActionPrimaryBackgroundHover"] = "actionPrimaryBackgroundHover";
  ValidSemanticColors["ActionPrimaryBackgroundPress"] = "actionPrimaryBackgroundPress";
  ValidSemanticColors["ActionPrimaryIcon"] = "actionPrimaryIcon";
  ValidSemanticColors["ActionPrimaryTextDefault"] = "actionPrimaryTextDefault";
  ValidSemanticColors["ActionPrimaryTextHover"] = "actionPrimaryTextHover";
  ValidSemanticColors["ActionPrimaryTextPress"] = "actionPrimaryTextPress";
  ValidSemanticColors["ActionTertiaryBackgroundDefault"] = "actionTertiaryBackgroundDefault";
  ValidSemanticColors["ActionTertiaryBackgroundHover"] = "actionTertiaryBackgroundHover";
  ValidSemanticColors["ActionTertiaryBackgroundPress"] = "actionTertiaryBackgroundPress";
  ValidSemanticColors["ActionTertiaryIconDefault"] = "actionTertiaryIconDefault";
  ValidSemanticColors["ActionTertiaryIconHover"] = "actionTertiaryIconHover";
  ValidSemanticColors["ActionTertiaryIconPress"] = "actionTertiaryIconPress";
  ValidSemanticColors["ActionTertiaryTextDefault"] = "actionTertiaryTextDefault";
  ValidSemanticColors["ActionTertiaryTextHover"] = "actionTertiaryTextHover";
  ValidSemanticColors["ActionTertiaryTextPress"] = "actionTertiaryTextPress";
  ValidSemanticColors["BackgroundDanger"] = "backgroundDanger";
  ValidSemanticColors["BackgroundPrimary"] = "backgroundPrimary";
  ValidSemanticColors["BackgroundSecondary"] = "backgroundSecondary";
  ValidSemanticColors["BackgroundSuccess"] = "backgroundSuccess";
  ValidSemanticColors["BackgroundWarning"] = "backgroundWarning";
  ValidSemanticColors["Border"] = "border";
  ValidSemanticColors["BorderAccessible"] = "borderAccessible";
  ValidSemanticColors["BorderDanger"] = "borderDanger";
  ValidSemanticColors["BorderWarning"] = "borderWarning";
  ValidSemanticColors["CodeBackground"] = "codeBackground";
  ValidSemanticColors["OverlayOverlay"] = "overlayOverlay";
  ValidSemanticColors["ProgressFill"] = "progressFill";
  ValidSemanticColors["ProgressTrack"] = "progressTrack";
  ValidSemanticColors["Skeleton"] = "skeleton";
  ValidSemanticColors["TableBackgroundSelectedDefault"] = "tableBackgroundSelectedDefault";
  ValidSemanticColors["TableBackgroundSelectedHover"] = "tableBackgroundSelectedHover";
  ValidSemanticColors["TableBackgroundUnselectedDefault"] = "tableBackgroundUnselectedDefault";
  ValidSemanticColors["TableBackgroundUnselectedHover"] = "tableBackgroundUnselectedHover";
  ValidSemanticColors["TagBrown"] = "tagBrown";
  ValidSemanticColors["TagCharcoal"] = "tagCharcoal";
  ValidSemanticColors["TagCoral"] = "tagCoral";
  ValidSemanticColors["TagDefault"] = "tagDefault";
  ValidSemanticColors["TagHover"] = "tagHover";
  ValidSemanticColors["TagIconDefault"] = "tagIconDefault";
  ValidSemanticColors["TagIconHover"] = "tagIconHover";
  ValidSemanticColors["TagIconPress"] = "tagIconPress";
  ValidSemanticColors["TagIndigo"] = "tagIndigo";
  ValidSemanticColors["TagInverse"] = "tagInverse";
  ValidSemanticColors["TagLemon"] = "tagLemon";
  ValidSemanticColors["TagLime"] = "tagLime";
  ValidSemanticColors["TagPink"] = "tagPink";
  ValidSemanticColors["TagPress"] = "tagPress";
  ValidSemanticColors["TagPurple"] = "tagPurple";
  ValidSemanticColors["TagTeal"] = "tagTeal";
  ValidSemanticColors["TagText"] = "tagText";
  ValidSemanticColors["TagTurquoise"] = "tagTurquoise";
  ValidSemanticColors["TextPlaceholder"] = "textPlaceholder";
  ValidSemanticColors["TextPrimary"] = "textPrimary";
  ValidSemanticColors["TextSecondary"] = "textSecondary";
  ValidSemanticColors["TextValidationDanger"] = "textValidationDanger";
  ValidSemanticColors["TextValidationSuccess"] = "textValidationSuccess";
  ValidSemanticColors["TextValidationWarning"] = "textValidationWarning";
  ValidSemanticColors["TooltipBackgroundTooltip"] = "tooltipBackgroundTooltip";
  return ValidSemanticColors;
}({});

const ColorVars = {
  primary: ValidSemanticColors.TextPrimary,
  secondary: ValidSemanticColors.TextSecondary,
  info: ValidSemanticColors.TextSecondary,
  error: ValidSemanticColors.TextValidationDanger,
  success: ValidSemanticColors.TextValidationSuccess,
  warning: ValidSemanticColors.TextValidationWarning
};

/**
 * Recursively appends `!important` to all CSS properties in an Emotion `CSSObject`.
 * Used to ensure that we always override Ant styles, without worrying about selector precedence.
 */
function importantify(obj) {
  return _mapValues(obj, (value, key) => {
    if (_isString(value) || _isNumber(value) || _isBoolean(value)) {
      // Make sure we don't double-append important
      if (_isString(value) && _endsWith(value, '!important')) {
        return value;
      }
      if (_isNumber(value)) {
        if (unitless[key]) {
          return `${value}!important`;
        }
        return `${value}px!important`;
      }
      return `${value}!important`;
    }
    if (_isNil(value)) {
      return value;
    }
    return importantify(value);
  });
}

/**
 * Returns a text color, in case of invalid/missing key and missing fallback color it will return textPrimary
 * @param theme
 * @param key - key of TypographyColor
 * @param fallbackColor - color to return as fallback -- used to remove tertiary check inline
 */
function getTypographyColor(theme, key, fallbackColor) {
  if (theme && key && Object(theme.colors).hasOwnProperty(ColorVars[key])) {
    return theme.colors[ColorVars[key]];
  }
  return fallbackColor !== null && fallbackColor !== void 0 ? fallbackColor : theme.colors.textPrimary;
}

/**
 * Returns validation color based on state, has default validation colors if params are not provided
 * @param theme
 * @param validationState
 * @param errorColor
 * @param warningColor
 * @param successColor
 */
function getValidationStateColor(theme, validationState) {
  let {
    errorColor,
    warningColor,
    successColor
  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  switch (validationState) {
    case 'error':
      return errorColor || theme.colors.actionDangerPrimaryBackgroundDefault;
    case 'warning':
      return warningColor || theme.colors.textValidationWarning;
    case 'success':
      return successColor || theme.colors.textValidationSuccess;
    default:
      return undefined;
  }
}
function getDarkModePortalStyles(theme) {
  if (!theme || !theme.isDarkMode) {
    return {};
  }
  return {
    border: `1px solid ${theme.colors.borderDecorative}`,
    boxShadow: 'none'
  };
}
const shadowCoverTop = bgColor => `linear-gradient(${bgColor} 30%, rgba(0, 0, 0, 0)) center top`;
const shadowCoverBot = bgColor => `linear-gradient(rgba(0, 0, 0, 0), ${bgColor} 70%) center bottom`;
const shadowCoverLeft = bgColor => `linear-gradient(to left, rgba(0, 0, 0, 0), ${bgColor} 30%) left center`;
const shadowCoverRight = bgColor => `linear-gradient(to left, ${bgColor} 70%, rgba(0, 0, 0, 0)) right center`;
const shadowTop = shadowRgb => `radial-gradient(
  farthest-side at 50% 0,
  rgba(${shadowRgb}, 0.2),
  rgba(${shadowRgb}, 0)
) center top`;
const shadowBot = shadowRgb => `radial-gradient(
  farthest-side at 50% 100%,
  rgba(${shadowRgb}, 0.2),
  rgba(${shadowRgb}, 0)
) center bottom`;
const shadowLeft = shadowRgb => `radial-gradient(
  farthest-side at 0 50%,
  rgba(${shadowRgb}, 0.2),
  rgba(${shadowRgb}, 0)
) left center`;
const shadowRight = shadowRgb => `radial-gradient(
  farthest-side at 100% 50%,
  rgba(${shadowRgb}, 0.2),
  rgba(${shadowRgb}, 0)
) right center`;
const shadowCoverBackgroundSizeVertical = '100% 40px';
const shadowCoverBackgroundSizeHorizontal = '40px 100%';
const shadowBackgroundSizeVertical = '100% 14px';
const shadowBackgroundSizeHorizontal = '14px 100%';
const getShadowScrollStylesMemoized = _memoize(function getShadowScrollStylesMemoized(theme, backgroundColor) {
  let orientation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'vertical';
  const bgColor = backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : theme.colors.backgroundPrimary;
  const shadowColor = theme.isDarkMode ? shadowDarkRgb : shadowLightRgb;
  if (orientation === 'horizontal') {
    return {
      background: `
            ${shadowCoverLeft(bgColor)},
            ${shadowCoverRight(bgColor)},
            ${shadowLeft(shadowColor)},
            ${shadowRight(shadowColor)}`,
      backgroundRepeat: 'no-repeat',
      backgroundSize: `
            ${shadowCoverBackgroundSizeHorizontal},
            ${shadowCoverBackgroundSizeHorizontal},
            ${shadowBackgroundSizeHorizontal},
            ${shadowBackgroundSizeHorizontal}`,
      backgroundAttachment: 'local, local, scroll, scroll'
    };
  }
  return {
    background: `
          ${shadowCoverTop(bgColor)},
          ${shadowCoverBot(bgColor)},
          ${shadowTop(shadowColor)},
          ${shadowBot(shadowColor)}`,
    backgroundRepeat: 'no-repeat',
    backgroundSize: `
          ${shadowCoverBackgroundSizeVertical},
          ${shadowCoverBackgroundSizeVertical},
          ${shadowBackgroundSizeVertical},
          ${shadowBackgroundSizeVertical}`,
    backgroundAttachment: 'local, local, scroll, scroll'
  };
}, (theme, backgroundColor, orientation) => {
  return `${theme.isDarkMode}-${backgroundColor}-${orientation}`;
});
const getShadowScrollStyles = function getShadowScrollStyles(theme) {
  let {
    backgroundColor,
    orientation
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return getShadowScrollStylesMemoized(theme, backgroundColor, orientation);
};
const getBottomOnlyShadowScrollStylesMemoized = _memoize(function getBottomOnlyShadowScrollStylesMemoized(theme, backgroundColor) {
  const bgColor = backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : theme.colors.backgroundPrimary;
  return {
    background: `
          ${shadowCoverBot(bgColor)},
          ${shadowBot(theme.isDarkMode ? shadowDarkRgb : shadowLightRgb)}`,
    backgroundRepeat: 'no-repeat',
    backgroundSize: `
          ${shadowCoverBackgroundSizeVertical},
          ${shadowBackgroundSizeVertical}`,
    backgroundAttachment: 'local, scroll'
  };
});
const getBottomOnlyShadowScrollStyles = function getBottomOnlyShadowScrollStyles(theme) {
  let {
    backgroundColor
  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return getBottomOnlyShadowScrollStylesMemoized(theme, backgroundColor);
};

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "g8zzui",
  styles: "cursor:progress"
} : {
  name: "4y1qki-AccessibleContainer",
  styles: "cursor:progress;label:AccessibleContainer;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function AccessibleContainer(_ref) {
  let {
    children,
    label
  } = _ref;
  if (!label) {
    return jsx(Fragment, {
      children: children
    });
  }
  return jsxs("div", {
    css: _ref2,
    children: [jsx("span", {
      css: visuallyHidden,
      children: label
    }), jsx("div", {
      "aria-hidden": true,
      children: children
    })]
  });
}

// Border variables
const borders = {
  borderRadiusMd: 4
};

// eslint-disable-next-line import/no-anonymous-default-export
var borders$1 = {
  ...borders
};

/**
 * These values are based on AntD's breakpoints which follow BootStrap 4 media query rules.
 * The numerical values represent the min-width of the given size.
 * AntD values: https://ant.design/components/grid#col
 * Bootstrap: https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints
 */

const breakpoints = {
  xs: 0,
  sm: 576,
  md: 768,
  lg: 992,
  xl: 1200,
  xxl: 1600
};
const mediaQueries = {
  xs: '@media (max-width: 575.98px)',
  sm: `@media (min-width: ${breakpoints.sm}px)`,
  md: `@media (min-width: ${breakpoints.md}px)`,
  lg: `@media (min-width: ${breakpoints.lg}px)`,
  xl: `@media (min-width: ${breakpoints.xl}px)`,
  xxl: `@media (min-width: ${breakpoints.xxl}px)`
};
const responsive = {
  breakpoints,
  mediaQueries
};
var responsive$1 = responsive;

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

const primitiveColors = {
  blue100: '#F0F8FF',
  blue200: '#D7EDFE',
  blue300: '#BAE1FC',
  blue400: '#8ACAFF',
  blue500: '#4299E0',
  blue600: '#2272B4',
  blue700: '#0E538B',
  blue800: '#04355D',
  brown: '#A6630C',
  coral: '#C83243',
  green100: '#F3FCF6',
  green200: '#D4F7DF',
  green300: '#B1ECC5',
  green400: '#8DDDA8',
  green500: '#3CAA60',
  green600: '#277C43',
  green700: '#115026',
  green800: '#093919',
  grey050: '#F6F7F9',
  grey100: '#E8ECF0',
  grey200: '#D1D9E1',
  grey300: '#C0CDD8',
  grey350: '#92A4B3',
  grey400: '#8396A5',
  grey500: '#5F7281',
  grey600: '#445461',
  grey650: '#37444F',
  grey700: '#1F272D',
  grey800: '#11171C',
  indigo: '#434A93',
  lemon: '#FACB66',
  lime: '#308613',
  pink: '#B45091',
  purple: '#8A63BF',
  red100: '#FFF5F7',
  red200: '#FDE2E8',
  red300: '#FBD0D8',
  red400: '#F792A6',
  red500: '#E65B77',
  red600: '#C82D4C',
  red700: '#9E102C',
  red800: '#630316',
  teal: '#04867D',
  turquoise: '#137DAE',
  white: '#FFFFFF',
  yellow100: '#FFF9EB',
  yellow200: '#FCEACA',
  yellow300: '#F8D4A5',
  yellow400: '#F2BE88',
  yellow500: '#DE7921',
  yellow600: '#BE501E',
  yellow700: '#93320B',
  yellow800: '#5F1B02'
};

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

const darkColorList = {
  actionDangerDefaultBackgroundDefault: 'rgba(247, 146, 166, 0.0000)',
  actionDangerDefaultBackgroundHover: 'rgba(247, 146, 166, 0.0800)',
  actionDangerDefaultBackgroundPress: 'rgba(247, 146, 166, 0.1600)',
  actionDangerDefaultBorderDefault: primitiveColors.red500,
  actionDangerDefaultBorderHover: primitiveColors.red400,
  actionDangerDefaultBorderPress: primitiveColors.red300,
  actionDangerDefaultTextDefault: primitiveColors.red500,
  actionDangerDefaultTextHover: primitiveColors.red400,
  actionDangerDefaultTextPress: primitiveColors.red300,
  actionDangerPrimaryBackgroundDefault: primitiveColors.red500,
  actionDangerPrimaryBackgroundHover: primitiveColors.red400,
  actionDangerPrimaryBackgroundPress: primitiveColors.red300,
  actionDangerPrimaryText: primitiveColors.grey800,
  actionDefaultBackgroundDefault: 'rgba(138, 202, 255, 0.0000)',
  actionDefaultBackgroundHover: 'rgba(138, 202, 255, 0.0800)',
  actionDefaultBackgroundPress: 'rgba(138, 202, 255, 0.1600)',
  actionDefaultBorderDefault: primitiveColors.grey650,
  actionDefaultBorderFocus: primitiveColors.blue400,
  actionDefaultBorderHover: primitiveColors.blue400,
  actionDefaultBorderPress: primitiveColors.blue300,
  actionDefaultIconDefault: primitiveColors.grey350,
  actionDefaultIconHover: primitiveColors.blue400,
  actionDefaultIconPress: primitiveColors.blue300,
  actionDefaultTextDefault: primitiveColors.grey100,
  actionDefaultTextHover: primitiveColors.blue400,
  actionDefaultTextPress: primitiveColors.blue300,
  actionDisabledBackground: primitiveColors.grey650,
  actionDisabledBorder: primitiveColors.grey600,
  actionDisabledText: primitiveColors.grey500,
  actionIconBackgroundDefault: 'rgba(255, 255, 255, 0.0000)',
  actionIconBackgroundHover: 'rgba(255, 255, 255, 0.0800)',
  actionIconBackgroundPress: 'rgba(255, 255, 255, 0.1600)',
  actionIconIconDefault: primitiveColors.grey350,
  actionIconIconHover: primitiveColors.grey300,
  actionIconIconPress: primitiveColors.grey200,
  actionLinkDefault: primitiveColors.blue500,
  actionLinkHover: primitiveColors.blue400,
  actionLinkPress: primitiveColors.blue300,
  actionPrimaryBackgroundDefault: primitiveColors.blue500,
  actionPrimaryBackgroundHover: primitiveColors.blue400,
  actionPrimaryBackgroundPress: primitiveColors.blue300,
  actionPrimaryIcon: primitiveColors.grey800,
  actionPrimaryTextDefault: primitiveColors.grey800,
  actionPrimaryTextHover: primitiveColors.grey800,
  actionPrimaryTextPress: primitiveColors.grey800,
  actionTertiaryBackgroundDefault: 'rgba(143, 205, 255, 0.0000)',
  actionTertiaryBackgroundHover: 'rgba(143, 205, 255, 0.0800)',
  actionTertiaryBackgroundPress: 'rgba(143, 205, 255, 0.1600)',
  actionTertiaryIconDefault: primitiveColors.blue500,
  actionTertiaryIconHover: primitiveColors.blue400,
  actionTertiaryIconPress: primitiveColors.blue300,
  actionTertiaryTextDefault: primitiveColors.blue500,
  actionTertiaryTextHover: primitiveColors.blue400,
  actionTertiaryTextPress: primitiveColors.blue300,
  backgroundDanger: 'rgba(200, 45, 76, 0.1600)',
  backgroundPrimary: primitiveColors.grey800,
  backgroundSecondary: primitiveColors.grey700,
  backgroundSuccess: 'rgba(39, 124, 67, 0.1600)',
  backgroundWarning: 'rgba(190, 80, 30, 0.1600)',
  border: primitiveColors.grey650,
  borderAccessible: primitiveColors.grey300,
  borderDanger: primitiveColors.red500,
  borderWarning: primitiveColors.yellow500,
  codeBackground: primitiveColors.grey650,
  overlayOverlay: 'rgba(31, 38, 45, 0.7200)',
  progressFill: primitiveColors.grey600,
  progressTrack: primitiveColors.grey700,
  skeleton: 'rgba(144, 164, 181, 0.1600)',
  tableBackgroundSelectedDefault: 'rgba(189, 205, 219, 0.0800)',
  tableBackgroundSelectedHover: 'rgba(189, 205, 219, 0.1200)',
  tableBackgroundUnselectedDefault: primitiveColors.grey800,
  tableBackgroundUnselectedHover: 'rgba(189, 205, 219, 0.0400)',
  tagBrown: 'rgba(166, 99, 12, 0.8600)',
  tagCharcoal: 'rgba(68, 83, 95, 0.8600)',
  tagCoral: 'rgba(200, 50, 67, 0.8600)',
  tagDefault: primitiveColors.grey650,
  tagHover: 'rgba(138, 202, 255, 0.0800)',
  tagIconDefault: primitiveColors.grey350,
  tagIconHover: primitiveColors.grey350,
  tagIconPress: primitiveColors.grey350,
  tagIndigo: 'rgba(67, 74, 147, 0.8600)',
  tagInverse: primitiveColors.grey800,
  tagLemon: 'rgba(250, 203, 102, 0.8600)',
  tagLime: 'rgba(48, 134, 19, 0.8600)',
  tagPink: 'rgba(180, 80, 145, 0.8600)',
  tagPress: 'rgba(138, 202, 255, 0.1600)',
  tagPurple: 'rgba(138, 99, 191, 0.8600)',
  tagTeal: 'rgba(4, 134, 125, 0.8600)',
  tagText: primitiveColors.grey100,
  tagTurquoise: 'rgba(19, 125, 174, 0.8600)',
  textPlaceholder: primitiveColors.grey400,
  textPrimary: primitiveColors.grey100,
  textSecondary: primitiveColors.grey350,
  textValidationDanger: primitiveColors.red500,
  textValidationSuccess: primitiveColors.green500,
  textValidationWarning: primitiveColors.yellow500,
  tooltipBackgroundTooltip: primitiveColors.grey300
};

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.

const lightColorList = {
  actionDangerDefaultBackgroundDefault: 'rgba(200, 45, 76, 0.0000)',
  actionDangerDefaultBackgroundHover: 'rgba(200, 45, 76, 0.0800)',
  actionDangerDefaultBackgroundPress: 'rgba(200, 45, 76, 0.1600)',
  actionDangerDefaultBorderDefault: primitiveColors.red600,
  actionDangerDefaultBorderHover: primitiveColors.red700,
  actionDangerDefaultBorderPress: primitiveColors.red800,
  actionDangerDefaultTextDefault: primitiveColors.red600,
  actionDangerDefaultTextHover: primitiveColors.red700,
  actionDangerDefaultTextPress: primitiveColors.red800,
  actionDangerPrimaryBackgroundDefault: primitiveColors.red600,
  actionDangerPrimaryBackgroundHover: primitiveColors.red700,
  actionDangerPrimaryBackgroundPress: primitiveColors.red800,
  actionDangerPrimaryText: primitiveColors.white,
  actionDefaultBackgroundDefault: 'rgba(34, 114, 180, 0.0000)',
  actionDefaultBackgroundHover: 'rgba(34, 114, 180, 0.0800)',
  actionDefaultBackgroundPress: 'rgba(34, 114, 180, 0.1600)',
  actionDefaultBorderDefault: primitiveColors.grey300,
  actionDefaultBorderFocus: primitiveColors.blue700,
  actionDefaultBorderHover: primitiveColors.blue600,
  actionDefaultBorderPress: primitiveColors.blue800,
  actionDefaultIconDefault: primitiveColors.grey600,
  actionDefaultIconHover: primitiveColors.blue700,
  actionDefaultIconPress: primitiveColors.blue800,
  actionDefaultTextDefault: primitiveColors.grey800,
  actionDefaultTextHover: primitiveColors.blue700,
  actionDefaultTextPress: primitiveColors.blue800,
  actionDisabledBackground: primitiveColors.grey100,
  actionDisabledBorder: primitiveColors.grey200,
  actionDisabledText: primitiveColors.grey350,
  actionIconBackgroundDefault: 'rgba(34, 114, 180, 0.0000)',
  actionIconBackgroundHover: 'rgba(34, 114, 180, 0.0800)',
  actionIconBackgroundPress: 'rgba(34, 114, 180, 0.1600)',
  actionIconIconDefault: primitiveColors.grey600,
  actionIconIconHover: primitiveColors.blue700,
  actionIconIconPress: primitiveColors.blue800,
  actionLinkDefault: primitiveColors.blue600,
  actionLinkHover: primitiveColors.blue700,
  actionLinkPress: primitiveColors.blue800,
  actionPrimaryBackgroundDefault: primitiveColors.blue600,
  actionPrimaryBackgroundHover: primitiveColors.blue700,
  actionPrimaryBackgroundPress: primitiveColors.blue800,
  actionPrimaryIcon: primitiveColors.white,
  actionPrimaryTextDefault: primitiveColors.white,
  actionPrimaryTextHover: primitiveColors.white,
  actionPrimaryTextPress: primitiveColors.white,
  actionTertiaryBackgroundDefault: 'rgba(34, 114, 180, 0.0000)',
  actionTertiaryBackgroundHover: 'rgba(34, 114, 180, 0.0800)',
  actionTertiaryBackgroundPress: 'rgba(34, 114, 180, 0.1600)',
  actionTertiaryIconDefault: primitiveColors.blue600,
  actionTertiaryIconHover: primitiveColors.blue700,
  actionTertiaryIconPress: primitiveColors.blue800,
  actionTertiaryTextDefault: primitiveColors.blue600,
  actionTertiaryTextHover: primitiveColors.blue700,
  actionTertiaryTextPress: primitiveColors.blue800,
  backgroundDanger: primitiveColors.red100,
  backgroundPrimary: primitiveColors.white,
  backgroundSecondary: primitiveColors.grey050,
  backgroundSuccess: primitiveColors.green100,
  backgroundWarning: primitiveColors.yellow100,
  border: primitiveColors.grey200,
  borderAccessible: primitiveColors.grey500,
  borderDanger: primitiveColors.red300,
  borderWarning: primitiveColors.yellow300,
  codeBackground: 'rgba(68, 83, 95, 0.0800)',
  overlayOverlay: 'rgba(64, 63, 63, 0.7200)',
  progressFill: primitiveColors.grey300,
  progressTrack: primitiveColors.grey100,
  skeleton: 'rgba(144, 164, 181, 0.1600)',
  tableBackgroundSelectedDefault: 'rgba(68, 83, 95, 0.0800)',
  tableBackgroundSelectedHover: 'rgba(68, 83, 95, 0.1200)',
  tableBackgroundUnselectedDefault: primitiveColors.white,
  tableBackgroundUnselectedHover: 'rgba(68, 83, 95, 0.0400)',
  tagBrown: primitiveColors.brown,
  tagCharcoal: primitiveColors.grey600,
  tagCoral: primitiveColors.coral,
  tagDefault: primitiveColors.grey100,
  tagHover: 'rgba(34, 114, 180, 0.0800)',
  tagIconDefault: primitiveColors.grey600,
  tagIconHover: primitiveColors.grey600,
  tagIconPress: primitiveColors.grey600,
  tagIndigo: primitiveColors.indigo,
  tagInverse: primitiveColors.grey800,
  tagLemon: primitiveColors.lemon,
  tagLime: primitiveColors.lime,
  tagPink: primitiveColors.pink,
  tagPress: 'rgba(34, 114, 180, 0.1600)',
  tagPurple: primitiveColors.purple,
  tagTeal: primitiveColors.teal,
  tagText: primitiveColors.white,
  tagTurquoise: primitiveColors.turquoise,
  textPlaceholder: primitiveColors.grey400,
  textPrimary: primitiveColors.grey800,
  textSecondary: primitiveColors.grey500,
  textValidationDanger: primitiveColors.red600,
  textValidationSuccess: primitiveColors.green600,
  textValidationWarning: primitiveColors.yellow600,
  tooltipBackgroundTooltip: primitiveColors.grey800
};

// Currently these are the same for both light and dark mode, but we may want to change this in the future.
const branded = {
  /** For AI components, the top-oriented start color of gradient treatments. */
  aiGradientStart: '#677FFD',
  /** For AI components, the bottom-oriented end color of gradient treatments. */
  aiGradientEnd: '#79BFF1'
};
const darkColors = {
  ...darkColorList,
  ...primitiveColors,
  branded
};
const lightColors = {
  ...lightColorList,
  ...primitiveColors,
  branded
};
function getSemanticColors(isDarkMode) {
  return isDarkMode ? darkColors : lightColors;
}

// When deprecating a color, add it to this object with a comment explaining why it's deprecated and a link to a JIRA ticket.
// Example: `@deprecated This color supports XXXX will be removed in an upcoming release (FEINF-1234).`
const deprecatedPrimitiveColors = {
  /** @deprecated This was an alias to `primitiveColors.blue600`, please use that instead.
   * If possible, please use an appropriate semantic color, such as `actionPrimaryBackgroundDefault`. */
  primary: primitiveColors.blue600,
  /** @deprecated This was an alias to `primitiveColors.grey600`, please use that instead.
   * If possible, please use an appropriate semantic color, such as `actionPrimaryBackgroundHover`. */
  charcoal: primitiveColors.grey600,
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioInteractiveAvailable: primitiveColors.blue600,
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioInteractiveHover: '#186099',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioInteractivePress: '#0D4F85',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioDisabled: '#A2AEB8',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioDefaultBorder: '#64727D',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioDefaultBackground: '#FFFFFF',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioInteractiveHoverSecondary: 'rgba(34, 115, 181, 0.08)',
  /** @deprecated This color supports legacy radio styles and will be removed in an upcoming release (FEINF-1674). */
  radioInteractivePressSecondary: 'rgba(34, 115, 181, 0.16)'
};
const deprecatedSemanticColorsLight = {
  /** @deprecated Use `backgroundDanger` (FEINF-xxxx) */
  backgroundValidationDanger: lightColorList.backgroundDanger,
  /** @deprecated Use `backgroundSuccess` (FEINF-xxxx) */
  backgroundValidationSuccess: lightColorList.backgroundSuccess,
  /** @deprecated Use `backgroundWarning` (FEINF-xxxx) */
  backgroundValidationWarning: lightColorList.backgroundWarning,
  /** @deprecated Use `border` (FEINF-xxxx) */
  borderDecorative: lightColorList.border,
  /** @deprecated Use `borderDanger` (FEINF-xxxx) */
  borderValidationDanger: lightColorList.borderDanger,
  /** @deprecated Use `borderWarning` (FEINF-xxxx) */
  borderValidationWarning: lightColorList.borderWarning,
  /** @deprecated Use `tableBackgroundUnselectedHover` (FEINF-xxxx) */
  tableRowHover: lightColorList.tableBackgroundUnselectedHover,
  /** @deprecated Use `textSecondary` (FEINF-xxxx) */
  textValidationInfo: lightColorList.textSecondary,
  /** @deprecated Use `codeBackground` (FEINF-xxxx) */
  typographyCodeBg: lightColorList.codeBackground
};
const deprecatedSemanticColorsDark = {
  backgroundValidationDanger: darkColorList.backgroundDanger,
  backgroundValidationSuccess: darkColorList.backgroundSuccess,
  backgroundValidationWarning: darkColorList.backgroundWarning,
  borderDecorative: darkColorList.border,
  borderValidationDanger: darkColorList.borderDanger,
  borderValidationWarning: darkColorList.borderWarning,
  tableRowHover: darkColorList.tableBackgroundUnselectedHover,
  textValidationInfo: darkColorList.textSecondary,
  typographyCodeBg: darkColorList.codeBackground
};

// A static list of secondary colors; these are used as a limited palette of color options in component props, i.e. `color="lime"`.
// TODO: We should split primitive colors into primary and secondary colors, and automatically generate this list.
function getColors(isDarkMode) {
  return {
    ...deprecatedPrimitiveColors,
    ...(isDarkMode ? deprecatedSemanticColorsDark : deprecatedSemanticColorsLight),
    ...getSemanticColors(isDarkMode)
  };
}

const FONT_SIZE_BASE = 13;

// Less variables that are used by AntD
const antdTypography = {
  fontSizeSm: 12,
  fontSizeBase: FONT_SIZE_BASE,
  fontSizeMd: FONT_SIZE_BASE,
  fontSizeLg: 18,
  fontSizeXl: 22,
  fontSizeXxl: 32,
  lineHeightSm: '16px',
  lineHeightBase: '20px',
  lineHeightMd: '20px',
  lineHeightLg: '24px',
  lineHeightXl: '28px',
  lineHeightXxl: '40px',
  typographyRegularFontWeight: 400,
  typographyBoldFontWeight: 600
};

// eslint-disable-next-line import/no-anonymous-default-export
var typography = {
  ...antdTypography
};

const defaultOptions = {
  enableAnimation: false,
  zIndexBase: 1000
};

// Function to get variables for a certain theme.
// End users should use useDesignSystemTheme instead.
function getTheme(isDarkMode) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;
  return {
    colors: getColors(isDarkMode),
    spacing: spacing$1,
    general: {
      ...antdGeneralVariables,
      ...getShadowVariables(isDarkMode)
    },
    typography,
    borders: borders$1,
    responsive: responsive$1,
    isDarkMode,
    options
  };
}

function getClassNamePrefix(theme) {
  const antdThemeName = theme.isDarkMode ? 'dark' : 'light';
  return `${theme.general.classnamePrefix}-${antdThemeName}`;
}
function getPrefixedClassNameFromTheme(theme, className) {
  return [getClassNamePrefix(theme), className].filter(Boolean).join('-');
}
function useDesignSystemTheme() {
  const emotionTheme = useTheme();
  // Graceful fallback to default theme in case a test or developer forgot context.
  const theme = emotionTheme && emotionTheme.general ? emotionTheme : getTheme(false);
  return {
    theme: theme,
    classNamePrefix: getClassNamePrefix(theme),
    getPrefixedClassName: className => getPrefixedClassNameFromTheme(theme, className)
  };
}
// This is a simple typed HOC wrapper around the useDesignSystemTheme hook, for use in older react components.
function WithDesignSystemThemeHoc(Component) {
  return function WrappedWithDesignSystemTheme(props) {
    const themeValues = useDesignSystemTheme();
    return jsx(Component, {
      ...props,
      designSystemThemeApi: themeValues
    });
  };
}

const DuboisContextDefaults = {
  enableAnimation: false,
  // Prefer to use useDesignSystemTheme.getPrefixedClassName instead
  getPrefixCls: suffix => suffix ? `du-bois-${suffix}` : 'du-bois',
  flags: {}
};
const DesignSystemThemeContext = /*#__PURE__*/createContext({
  isDarkMode: false
});
const DesignSystemContext = /*#__PURE__*/createContext(DuboisContextDefaults);
const DU_BOIS_ENABLE_ANIMATION_CLASSNAME = 'du-bois-enable-animation';
function getAnimationCss(enableAnimation) {
  const disableAnimationCss = {
    animationDuration: '0s !important',
    transition: 'none !important'
  };
  return enableAnimation ? {} : {
    // Apply to the current element
    ...disableAnimationCss,
    '&::before': disableAnimationCss,
    '&::after': disableAnimationCss,
    // Also apply to all child elements with a class that starts with our prefix
    [`[class*=du-bois]:not(.${DU_BOIS_ENABLE_ANIMATION_CLASSNAME}, .${DU_BOIS_ENABLE_ANIMATION_CLASSNAME} *)`]: {
      ...disableAnimationCss,
      // Also target any pseudo-elements associated with those elements, since these can also be animated.
      '&::before': disableAnimationCss,
      '&::after': disableAnimationCss
    }
  };
}
const DesignSystemProviderPropsContext = /*#__PURE__*/React__default.createContext(null);
const AntDConfigProviderPropsContext = /*#__PURE__*/React__default.createContext(null);

/** Only to be accessed by SupportsDuBoisThemes, except for special exceptions like tests and storybook. Ask in #dubois first if you need to use it. */
const DesignSystemThemeProvider = _ref => {
  let {
    isDarkMode = false,
    children
  } = _ref;
  return jsx(DesignSystemThemeContext.Provider, {
    value: {
      isDarkMode
    },
    children: children
  });
};
const DesignSystemProvider = _ref2 => {
  let {
    children,
    enableAnimation = false,
    zIndexBase = 1000,
    getPopupContainer,
    flags = {},
    // Disable virtualization of legacy AntD components when running tests so that all items are rendered
    disableLegacyAntVirtualization = process.env.NODE_ENV === 'test' ? true : undefined
  } = _ref2;
  const {
    isDarkMode
  } = useContext(DesignSystemThemeContext);
  const theme = useMemo(() => getTheme(isDarkMode, {
    enableAnimation,
    zIndexBase
  }),
  // TODO: revisit this
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [isDarkMode, zIndexBase]);
  const providerPropsContext = useMemo(() => ({
    isDarkMode,
    enableAnimation,
    zIndexBase,
    getPopupContainer,
    flags
  }), [isDarkMode, enableAnimation, zIndexBase, getPopupContainer, flags]);
  const classNamePrefix = getClassNamePrefix(theme);
  const value = useMemo(() => {
    return {
      enableAnimation,
      isDarkMode,
      getPrefixCls: suffix => getPrefixedClassNameFromTheme(theme, suffix),
      getPopupContainer,
      flags
    };
  }, [enableAnimation, theme, isDarkMode, getPopupContainer, flags]);
  useEffect(() => {
    return () => {
      // when the design system context is unmounted, make sure the notification cache is also cleaned up
      notification.destroy();
    };
  }, []);
  return jsx(DesignSystemProviderPropsContext.Provider, {
    value: providerPropsContext,
    children: jsx(ThemeProvider, {
      theme: theme,
      children: jsx(AntDConfigProviderPropsContext.Provider, {
        value: {
          prefixCls: classNamePrefix,
          getPopupContainer,
          virtual: !disableLegacyAntVirtualization
        },
        children: jsx(DesignSystemContext.Provider, {
          value: value,
          children: children
        })
      })
    })
  });
};
const ApplyDesignSystemContextOverrides = _ref3 => {
  let {
    enableAnimation,
    zIndexBase,
    getPopupContainer,
    flags,
    children
  } = _ref3;
  const parentDesignSystemProviderProps = useContext(DesignSystemProviderPropsContext);
  if (parentDesignSystemProviderProps === null) {
    throw new Error(`ApplyDesignSystemContextOverrides cannot be used standalone - DesignSystemProvider must exist in the React context`);
  }
  const newProps = useMemo(() => ({
    ...parentDesignSystemProviderProps,
    enableAnimation: enableAnimation !== null && enableAnimation !== void 0 ? enableAnimation : parentDesignSystemProviderProps.enableAnimation,
    zIndexBase: zIndexBase !== null && zIndexBase !== void 0 ? zIndexBase : parentDesignSystemProviderProps.zIndexBase,
    getPopupContainer: getPopupContainer !== null && getPopupContainer !== void 0 ? getPopupContainer : parentDesignSystemProviderProps.getPopupContainer,
    flags: {
      ...parentDesignSystemProviderProps.flags,
      ...flags
    }
  }), [parentDesignSystemProviderProps, enableAnimation, zIndexBase, getPopupContainer, flags]);
  return jsx(DesignSystemProvider, {
    ...newProps,
    children: children
  });
};

// This is a more-specific version of `ApplyDesignSystemContextOverrides` that only allows overriding the flags.
const ApplyDesignSystemFlags = _ref4 => {
  let {
    flags,
    children
  } = _ref4;
  const parentDesignSystemProviderProps = useContext(DesignSystemProviderPropsContext);
  if (parentDesignSystemProviderProps === null) {
    throw new Error(`ApplyDesignSystemFlags cannot be used standalone - DesignSystemProvider must exist in the React context`);
  }
  const newProps = useMemo(() => ({
    ...parentDesignSystemProviderProps,
    flags: {
      ...parentDesignSystemProviderProps.flags,
      ...flags
    }
  }), [parentDesignSystemProviderProps, flags]);
  return jsx(DesignSystemProvider, {
    ...newProps,
    children: children
  });
};
const DesignSystemAntDConfigProvider = _ref5 => {
  let {
    children
  } = _ref5;
  const antdContext = useAntDConfigProviderContext();
  return jsx(ConfigProvider, {
    ...antdContext,
    children: children
  });
};
const useAntDConfigProviderContext = () => {
  var _useContext;
  return (_useContext = useContext(AntDConfigProviderPropsContext)) !== null && _useContext !== void 0 ? _useContext : {
    prefixCls: undefined
  };
};

/**
 * When using AntD components inside Design System wrapper components (e.g. Modal, Collapse etc),
 * we don't want Design System's prefix class to override them.
 *
 * Since all Design System's components have are wrapped with DesignSystemAntDConfigProvider,
 * this won't affect their own prefixCls, but just allow nested antd components to keep their ant prefix.
 */
const RestoreAntDDefaultClsPrefix = _ref6 => {
  let {
    children
  } = _ref6;
  return jsx(ConfigProvider, {
    prefixCls: "ant",
    children: children
  });
};

function useDesignSystemContext() {
  return useContext(DesignSystemContext);
}

function useDesignSystemFlags() {
  const context = useDesignSystemContext();
  return context.flags;
}

const uniqueId = () => new Date().getTime() + Array(16).fill('').map(() => parseInt((Math.random() * 10).toString())).join('');
function useUniqueId() {
  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return useState(() => `${prefix}-${uniqueId()}`)[0];
}

const getIconVariantStyles = (theme, linearGradientId, color) => {
  switch (color) {
    case 'success':
      return {
        color: theme.colors.textValidationSuccess
      };
    case 'warning':
      return {
        color: theme.colors.textValidationWarning
      };
    case 'danger':
      return {
        color: theme.colors.textValidationDanger
      };
    case 'ai':
      return {
        'svg *': {
          fill: `url(#${linearGradientId})`
        }
      };
    default:
      return {
        color: color
      };
  }
};
const Icon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  const {
    component: Component,
    dangerouslySetAntdProps,
    color,
    style,
    ...otherProps
  } = props;
  const {
    theme
  } = useDesignSystemTheme();
  const linearGradientId = useUniqueId('ai-linear-gradient');
  const MemoizedComponent = useMemo(() => Component ? _ref => {
    let {
      fill,
      ...iconProps
    } = _ref;
    return (
      // We don't rely on top-level fills for our colors. Fills are specified
      // with "currentColor" on children of the top-most svg.
      jsxs(Fragment, {
        children: [jsx(Component, {
          fill: "none",
          ...iconProps
        }), color === 'ai' && jsx("svg", {
          width: "0",
          height: "0",
          viewBox: "0 0 0 0",
          css: visuallyHidden,
          children: jsx("defs", {
            children: jsxs("linearGradient", {
              id: linearGradientId,
              x2: "100%",
              y2: "100%",
              children: [jsx("stop", {
                offset: "0%",
                stopColor: theme.colors.branded.aiGradientStart
              }), jsx("stop", {
                offset: "100%",
                stopColor: theme.colors.branded.aiGradientEnd
              })]
            })
          })
        })]
      })
    );
  } : undefined, [Component, color, linearGradientId, theme]);
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(AntDIcon, {
      ref: forwardedRef,
      "aria-hidden": "true",
      css: /*#__PURE__*/css({
        fontSize: theme.general.iconFontSize,
        ...getIconVariantStyles(theme, linearGradientId, color)
      }, process.env.NODE_ENV === "production" ? "" : ";label:Icon;"),
      component: MemoizedComponent,
      style: {
        ...style
      },
      ...otherProps,
      ...dangerouslySetAntdProps
    })
  });
});

function SvgCheckIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "m15.06 3.56-9.53 9.531L1 8.561 2.06 7.5l3.47 3.47L14 2.5l1.06 1.06Z",
      clipRule: "evenodd"
    })
  });
}
const CheckIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgCheckIcon
  });
});
CheckIcon.displayName = 'CheckIcon';
var CheckIcon$1 = CheckIcon;

function SvgChevronLeftIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M7.083 8 10 10.947 8.958 12 5 8l3.958-4L10 5.053 7.083 8Z",
      clipRule: "evenodd"
    })
  });
}
const ChevronLeftIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgChevronLeftIcon
  });
});
ChevronLeftIcon.displayName = 'ChevronLeftIcon';
var ChevronLeftIcon$1 = ChevronLeftIcon;

function SvgChevronRightIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M8.917 8 6 5.053 7.042 4 11 8l-3.958 4L6 10.947 8.917 8Z",
      clipRule: "evenodd"
    })
  });
}
const ChevronRightIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgChevronRightIcon
  });
});
ChevronRightIcon.displayName = 'ChevronRightIcon';
var ChevronRightIcon$1 = ChevronRightIcon;

function SvgCloseIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M6.97 8.03 2 3.06 3.06 2l4.97 4.97L13 2l1.06 1.06-4.969 4.97 4.97 4.97L13 14.06 8.03 9.092l-4.97 4.97L2 13l4.97-4.97Z",
      clipRule: "evenodd"
    })
  });
}
const CloseIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgCloseIcon
  });
});
CloseIcon.displayName = 'CloseIcon';
var CloseIcon$1 = CloseIcon;

function SvgCursorIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsx("g", {
      clipPath: "url(#CursorIcon_svg__a)",
      children: jsx("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        d: "M1.22 1.22a.75.75 0 0 1 .802-.169l13.5 5.25a.75.75 0 0 1-.043 1.413L9.597 9.597l-1.883 5.882a.75.75 0 0 1-1.413.043l-5.25-13.5a.75.75 0 0 1 .169-.802Zm1.847 1.847 3.864 9.937 1.355-4.233a.75.75 0 0 1 .485-.485l4.233-1.355-9.937-3.864Z",
        clipRule: "evenodd"
      })
    }), jsx("defs", {
      children: jsx("clipPath", {
        id: "CursorIcon_svg__a",
        children: jsx("path", {
          fill: "#fff",
          d: "M16 0H0v16h16z"
        })
      })
    })]
  });
}
const CursorIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgCursorIcon
  });
});
CursorIcon.displayName = 'CursorIcon';
var CursorIcon$1 = CursorIcon;

function SvgDangerIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsx("path", {
      fill: "currentColor",
      d: "M7.248 10.748a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0ZM8.748 4.998v4h-1.5v-4h1.5Z"
    }), jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "m11.533 15.776 4.243-4.243a.75.75 0 0 0 .22-.53v-6.01a.75.75 0 0 0-.22-.53L11.533.22a.75.75 0 0 0-.53-.22h-6.01a.75.75 0 0 0-.53.22L.22 4.462a.75.75 0 0 0-.22.53v6.011c0 .199.079.39.22.53l4.242 4.243c.141.14.332.22.53.22h6.011a.75.75 0 0 0 .53-.22Zm2.963-10.473v5.39l-3.804 3.803H5.303L1.5 10.692V5.303L5.303 1.5h5.39l3.803 3.803Z",
      clipRule: "evenodd"
    })]
  });
}
const DangerIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgDangerIcon
  });
});
DangerIcon.displayName = 'DangerIcon';
var DangerIcon$1 = DangerIcon;

function SvgFaceFrownIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsxs("g", {
      fill: "currentColor",
      clipPath: "url(#FaceFrownIcon_svg__a)",
      children: [jsx("path", {
        d: "M6 5.25a.75.75 0 0 0 0 1.5h.007a.75.75 0 0 0 0-1.5H6ZM9.25 6a.75.75 0 0 1 .75-.75h.007a.75.75 0 0 1 0 1.5H10A.75.75 0 0 1 9.25 6ZM10.07 11.12a.75.75 0 0 0 1.197-.903l-.001-.001v-.001l-.003-.003-.005-.006-.015-.02a2.95 2.95 0 0 0-.217-.246 4.717 4.717 0 0 0-.627-.546C9.86 9 9.04 8.584 8 8.584s-1.858.416-2.4.81a4.716 4.716 0 0 0-.795.733 2.87 2.87 0 0 0-.048.06l-.015.019-.005.006-.002.003-.031.044.03-.042a.75.75 0 1 0 1.22.875 3.219 3.219 0 0 1 .529-.485c.375-.273.89-.523 1.517-.523.627 0 1.142.25 1.517.523a3.219 3.219 0 0 1 .529.485l.021.025.002.003Z"
      }), jsx("path", {
        fillRule: "evenodd",
        d: "M8 .583a7.417 7.417 0 1 0 0 14.834A7.417 7.417 0 0 0 8 .583ZM2.083 8a5.917 5.917 0 1 1 11.834 0A5.917 5.917 0 0 1 2.083 8Z",
        clipRule: "evenodd"
      })]
    }), jsx("defs", {
      children: jsx("clipPath", {
        id: "FaceFrownIcon_svg__a",
        children: jsx("path", {
          fill: "#fff",
          d: "M0 0h16v16H0z"
        })
      })
    })]
  });
}
const FaceFrownIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgFaceFrownIcon
  });
});
FaceFrownIcon.displayName = 'FaceFrownIcon';
var FaceFrownIcon$1 = FaceFrownIcon;

function SvgFaceNeutralIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsxs("g", {
      fill: "currentColor",
      fillRule: "evenodd",
      clipPath: "url(#FaceNeutralIcon_svg__a)",
      clipRule: "evenodd",
      children: [jsx("path", {
        d: "M8 2.083a5.917 5.917 0 1 0 0 11.834A5.917 5.917 0 0 0 8 2.084ZM.583 8a7.417 7.417 0 1 1 14.834 0A7.417 7.417 0 0 1 .583 8Z"
      }), jsx("path", {
        d: "M4.583 10a.75.75 0 0 1 .75-.75h5.334a.75.75 0 1 1 0 1.5H5.333a.75.75 0 0 1-.75-.75ZM5.25 6A.75.75 0 0 1 6 5.25h.007a.75.75 0 0 1 0 1.5H6A.75.75 0 0 1 5.25 6ZM9.25 6a.75.75 0 0 1 .75-.75h.007a.75.75 0 1 1 0 1.5H10A.75.75 0 0 1 9.25 6Z"
      })]
    }), jsx("defs", {
      children: jsx("clipPath", {
        id: "FaceNeutralIcon_svg__a",
        children: jsx("path", {
          fill: "#fff",
          d: "M0 0h16v16H0z"
        })
      })
    })]
  });
}
const FaceNeutralIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgFaceNeutralIcon
  });
});
FaceNeutralIcon.displayName = 'FaceNeutralIcon';
var FaceNeutralIcon$1 = FaceNeutralIcon;

function SvgFaceSmileIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsxs("g", {
      fill: "currentColor",
      clipPath: "url(#FaceSmileIcon_svg__a)",
      children: [jsx("path", {
        fillRule: "evenodd",
        d: "M8 2.083a5.917 5.917 0 1 0 0 11.834A5.917 5.917 0 0 0 8 2.084ZM.583 8a7.417 7.417 0 1 1 14.834 0A7.417 7.417 0 0 1 .583 8Z",
        clipRule: "evenodd"
      }), jsx("path", {
        d: "M4.883 8.733a.75.75 0 0 1 1.048.147l.002.003.021.026a3.216 3.216 0 0 0 .529.485c.375.273.89.523 1.517.523.627 0 1.142-.25 1.517-.523a3.215 3.215 0 0 0 .55-.511.75.75 0 0 1 1.2.9l.029-.042-.03.043-.001.002-.002.002-.005.007-.015.019a3.878 3.878 0 0 1-.217.247c-.144.15-.354.348-.627.546-.54.393-1.359.81-2.399.81s-1.858-.417-2.4-.81a4.716 4.716 0 0 1-.795-.734 2.643 2.643 0 0 1-.048-.059l-.015-.02-.005-.006-.002-.002v-.002h-.002a.75.75 0 0 1 .15-1.05Z"
      }), jsx("path", {
        fillRule: "evenodd",
        d: "M5.25 6A.75.75 0 0 1 6 5.25h.007a.75.75 0 0 1 0 1.5H6A.75.75 0 0 1 5.25 6ZM9.25 6a.75.75 0 0 1 .75-.75h.007a.75.75 0 1 1 0 1.5H10A.75.75 0 0 1 9.25 6Z",
        clipRule: "evenodd"
      })]
    }), jsx("defs", {
      children: jsx("clipPath", {
        id: "FaceSmileIcon_svg__a",
        children: jsx("path", {
          fill: "#fff",
          d: "M0 0h16v16H0z"
        })
      })
    })]
  });
}
const FaceSmileIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgFaceSmileIcon
  });
});
FaceSmileIcon.displayName = 'FaceSmileIcon';
var FaceSmileIcon$1 = FaceSmileIcon;

function SvgLoadingIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 24 24",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M23.212 12a.788.788 0 0 1-.789-.788 9.57 9.57 0 0 0-.757-3.751 9.662 9.662 0 0 0-5.129-5.129 9.587 9.587 0 0 0-3.749-.755.788.788 0 0 1 0-1.577c1.513 0 2.983.296 4.365.882a11.128 11.128 0 0 1 3.562 2.403 11.157 11.157 0 0 1 3.283 7.927.785.785 0 0 1-.786.788Z",
      clipRule: "evenodd"
    })
  });
}
const LoadingIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgLoadingIcon
  });
});
LoadingIcon.displayName = 'LoadingIcon';
var LoadingIcon$1 = LoadingIcon;

function SvgMegaphoneIcon(props) {
  return jsx("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 18 18",
    ...props,
    children: jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M16.25 2a.75.75 0 0 0-1.248-.56l-4.287 3.81H4A2.75 2.75 0 0 0 1.25 8v2A2.75 2.75 0 0 0 4 12.75h1.75V16a.75.75 0 0 0 1.5 0v-3.25h3.465l4.287 3.81A.75.75 0 0 0 16.25 16V2Zm-4.752 4.56 3.252-2.89v10.66l-3.252-2.89a.75.75 0 0 0-.498-.19H4c-.69 0-1.25-.56-1.25-1.25V8c0-.69.56-1.25 1.25-1.25h7a.75.75 0 0 0 .498-.19Z",
      clipRule: "evenodd"
    })
  });
}
const MegaphoneIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgMegaphoneIcon
  });
});
MegaphoneIcon.displayName = 'MegaphoneIcon';
var MegaphoneIcon$1 = MegaphoneIcon;

function SvgNewWindowIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsx("path", {
      fill: "currentColor",
      d: "M10 1h5v5h-1.5V3.56L8.53 8.53 7.47 7.47l4.97-4.97H10V1Z"
    }), jsx("path", {
      fill: "currentColor",
      d: "M1 2.75A.75.75 0 0 1 1.75 2H8v1.5H2.5v10h10V8H14v6.25a.75.75 0 0 1-.75.75H1.75a.75.75 0 0 1-.75-.75V2.75Z"
    })]
  });
}
const NewWindowIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgNewWindowIcon
  });
});
NewWindowIcon.displayName = 'NewWindowIcon';
var NewWindowIcon$1 = NewWindowIcon;

function SvgWarningIcon(props) {
  return jsxs("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    width: "1em",
    height: "1em",
    fill: "none",
    viewBox: "0 0 16 16",
    ...props,
    children: [jsx("path", {
      fill: "currentColor",
      d: "M7.25 10V6.5h1.5V10h-1.5ZM8 12.5A.75.75 0 1 0 8 11a.75.75 0 0 0 0 1.5Z"
    }), jsx("path", {
      fill: "currentColor",
      fillRule: "evenodd",
      d: "M8 1a.75.75 0 0 1 .649.374l7.25 12.5A.75.75 0 0 1 15.25 15H.75a.75.75 0 0 1-.649-1.126l7.25-12.5A.75.75 0 0 1 8 1Zm0 2.245L2.052 13.5h11.896L8 3.245Z",
      clipRule: "evenodd"
    })]
  });
}
const WarningIcon = /*#__PURE__*/forwardRef((props, forwardedRef) => {
  return jsx(Icon, {
    ref: forwardedRef,
    ...props,
    component: SvgWarningIcon
  });
});
WarningIcon.displayName = 'WarningIcon';
var WarningIcon$1 = WarningIcon;

function getDefaultStyles(theme) {
  let loading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  const defaultStyles = {
    backgroundColor: theme.colors.actionDefaultBackgroundDefault,
    borderColor: theme.colors.actionDefaultBorderDefault,
    color: theme.colors.actionDefaultTextDefault
  };
  return {
    ...defaultStyles,
    lineHeight: theme.typography.lineHeightBase,
    textDecoration: 'none',
    '&:hover': {
      backgroundColor: theme.colors.actionDefaultBackgroundHover,
      borderColor: theme.colors.actionDefaultBorderHover,
      color: theme.colors.actionDefaultTextHover
    },
    '&:active': {
      backgroundColor: loading ? theme.colors.actionDefaultBackgroundDefault : theme.colors.actionDefaultBackgroundPress,
      borderColor: theme.colors.actionDefaultBorderPress,
      color: theme.colors.actionDefaultTextPress
    }
  };
}
function getPrimaryStyles(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionPrimaryBackgroundDefault,
    borderColor: 'transparent',
    color: theme.colors.actionPrimaryTextDefault
  };
  return {
    ...defaultStyles,
    textShadow: 'none',
    '&:hover': {
      backgroundColor: theme.colors.actionPrimaryBackgroundHover,
      borderColor: 'transparent',
      color: theme.colors.actionPrimaryTextHover
    },
    '&:active': {
      backgroundColor: theme.colors.actionPrimaryBackgroundPress,
      borderColor: 'transparent',
      color: theme.colors.actionPrimaryTextPress
    }
  };
}
function getLinkStyles$1(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionTertiaryBackgroundDefault,
    borderColor: theme.colors.actionTertiaryBackgroundDefault,
    color: theme.colors.actionTertiaryTextDefault
  };
  return {
    ...defaultStyles,
    '&:hover': {
      backgroundColor: theme.colors.actionTertiaryBackgroundHover,
      borderColor: 'transparent',
      color: theme.colors.actionTertiaryTextHover
    },
    '&:active': {
      backgroundColor: theme.colors.actionTertiaryBackgroundPress,
      borderColor: 'transparent',
      color: theme.colors.actionTertiaryTextPress
    },
    '&[disabled]:hover': {
      background: 'none',
      color: theme.colors.actionDisabledText
    }
  };
}
function getPrimaryDangerStyles(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionDangerPrimaryBackgroundDefault,
    borderColor: 'transparent',
    color: theme.colors.actionPrimaryTextDefault
  };
  return {
    ...defaultStyles,
    '&:hover': {
      backgroundColor: theme.colors.actionDangerPrimaryBackgroundHover,
      borderColor: 'transparent',
      color: theme.colors.actionPrimaryTextHover
    },
    '&:active': {
      backgroundColor: theme.colors.actionDangerPrimaryBackgroundPress,
      borderColor: 'transparent',
      color: theme.colors.actionPrimaryTextPress
    },
    '&:focus-visible': {
      outlineColor: theme.colors.actionDangerPrimaryBackgroundDefault
    }
  };
}
function getSecondaryDangerStyles(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionDangerDefaultBackgroundDefault,
    borderColor: theme.colors.actionDangerDefaultBorderDefault,
    color: theme.colors.actionDangerDefaultTextDefault
  };
  return {
    ...defaultStyles,
    '&:hover': {
      backgroundColor: theme.colors.actionDangerDefaultBackgroundHover,
      borderColor: theme.colors.actionDangerDefaultBorderHover,
      color: theme.colors.actionDangerDefaultTextHover
    },
    '&:active': {
      backgroundColor: theme.colors.actionDangerDefaultBackgroundPress,
      borderColor: theme.colors.actionDangerDefaultBorderPress,
      color: theme.colors.actionDangerDefaultTextPress
    },
    '&:focus-visible': {
      outlineColor: theme.colors.actionDangerPrimaryBackgroundDefault
    }
  };
}
function getDisabledStyles(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionDisabledBackground,
    borderColor: 'transparent',
    color: theme.colors.actionDisabledText
  };
  return {
    ...defaultStyles,
    '&:hover': {
      backgroundColor: theme.colors.actionDisabledBackground,
      borderColor: 'transparent',
      color: theme.colors.actionDisabledText
    },
    '&:active': {
      backgroundColor: theme.colors.actionDisabledBackground,
      borderColor: 'transparent',
      color: theme.colors.actionDisabledText
    }
  };
}
function getDisabledTertiaryStyles(theme) {
  const defaultStyles = {
    backgroundColor: theme.colors.actionTertiaryBackgroundDefault,
    borderColor: 'transparent',
    color: theme.colors.actionDisabledText
  };
  return {
    ...defaultStyles,
    '&:hover': {
      backgroundColor: theme.colors.actionTertiaryBackgroundDefault,
      borderColor: 'transparent',
      color: theme.colors.actionDisabledText
    },
    '&:active': {
      backgroundColor: theme.colors.actionTertiaryBackgroundDefault,
      borderColor: 'transparent',
      color: theme.colors.actionDisabledText
    }
  };
}

let DesignSystemEventProviderComponentTypes = /*#__PURE__*/function (DesignSystemEventProviderComponentTypes) {
  DesignSystemEventProviderComponentTypes["Banner"] = "banner";
  DesignSystemEventProviderComponentTypes["Button"] = "button";
  DesignSystemEventProviderComponentTypes["Input"] = "input";
  return DesignSystemEventProviderComponentTypes;
}({});
let DesignSystemEventProviderAnalyticsEventTypes = /*#__PURE__*/function (DesignSystemEventProviderAnalyticsEventTypes) {
  DesignSystemEventProviderAnalyticsEventTypes["OnClick"] = "onClick";
  DesignSystemEventProviderAnalyticsEventTypes["OnView"] = "onView";
  DesignSystemEventProviderAnalyticsEventTypes["OnValueChange"] = "onValueChange";
  return DesignSystemEventProviderAnalyticsEventTypes;
}({});
const shouldTriggerCallback = (eventType, analyticsEvents) => {
  return analyticsEvents.includes(eventType);
};
const DefaultEmptyCallbacks = {
  callback: () => {}
};
const DesignSystemEventProviderContext = /*#__PURE__*/React__default.createContext(DefaultEmptyCallbacks);

/**
 * This gets the event provider, which is used to pass callbacks to the design system for events such as onClick, onView, and onValueChange.
 * If the value is undefined, then the expected behavior is to not emit any events.
 *
 * @returns DesignSystemEventProviderContextType
 */
const useDesignSystemEventProviderContext = () => {
  return useContext(DesignSystemEventProviderContext);
};

/**
 * NOTE: This is not suggested for direct usage from engineers, and should emit your own events.
 * See https://databricks.atlassian.net/wiki/spaces/UN/pages/2533556277/Usage+Logging+in+UI#Send-usage-logging-from-UI for more details.
 *
 * This gets the event provider component event type callbacks.
 * If context & componentId are not undefined, then it will check if the event is in analyticsEvents or the default analyticsEvents for that component.
 * If the context or componentId are undefined, then the expected behavior is to not emit any events.
 *
 * @returns Object of event callbacks
 */
const useDesignSystemEventComponentCallbacks = _ref => {
  let {
    componentType,
    componentId,
    analyticsEvents
  } = _ref;
  const context = useDesignSystemEventProviderContext();
  const callbacks = useMemo(() => {
    if (context === DefaultEmptyCallbacks || componentId === undefined) {
      return {
        onClick: () => {},
        onValueChange: () => {},
        onView: () => {}
      };
    }
    return {
      onClick: () => {
        if (shouldTriggerCallback(DesignSystemEventProviderAnalyticsEventTypes.OnClick, analyticsEvents)) {
          context.callback(DesignSystemEventProviderAnalyticsEventTypes.OnClick, componentType, componentId);
        }
      },
      onValueChange: () => {
        if (shouldTriggerCallback(DesignSystemEventProviderAnalyticsEventTypes.OnValueChange, analyticsEvents)) {
          context.callback(DesignSystemEventProviderAnalyticsEventTypes.OnValueChange, componentType, componentId);
        }
      },
      onView: () => {
        if (shouldTriggerCallback(DesignSystemEventProviderAnalyticsEventTypes.OnView, analyticsEvents)) {
          context.callback(DesignSystemEventProviderAnalyticsEventTypes.OnView, componentType, componentId);
        }
      }
    };
  }, [context, componentType, componentId, analyticsEvents]);
  return callbacks;
};

/**
 * NOTE: This is not suggested for direct usage from engineers, and should use RecordEventContext instead.
 * See https://databricks.atlassian.net/wiki/spaces/UN/pages/2533556277/Usage+Logging+in+UI#Send-usage-logging-from-UI for more details.
 *
 * This is the Design System Event Context Provider, and is only used to pass callbacks to the design system for events such as onClick, onView, and onValueChange.
 *
 * @param children Children react elements
 * @param callback The event callback function
 * @returns Design System Event Context Provider with the children inside
 */
function DesignSystemEventProvider(_ref2) {
  let {
    children,
    callback
  } = _ref2;
  const contextValue = useMemo(() => {
    return {
      callback
    };
  }, [callback]);
  return jsx(DesignSystemEventProviderContext.Provider, {
    value: contextValue,
    children: children
  });
}

// Use Symbol to correctly handled null/undefined as stable values
const NOT_INITIALIZED = Symbol('NOT_INITIALIZED');

/**
 * Use to keep a stable value on the first mount of a component
 * that cannot change.
 */
function useStable(valueCallback) {
  const ref = useRef(NOT_INITIALIZED);
  if (ref.current === NOT_INITIALIZED) {
    const val = valueCallback();
    ref.current = val;
    return val;
  }
  return ref.current;
}
let sequentialCounter = 0;
function useStableUid() {
  return useStable(() => sequentialCounter++);
}

/** Props for UI components that support a "loading" state. */

/**
 * A handler for integrating UI components with external latency instrumentation.
 * If provided via `LoadingStateContext`, hooks will be called whenever child
 * components in a "loading" state are mounted and unmounted.
 */

const LoadingStateContext = /*#__PURE__*/createContext(null);
/**
 * Indicates that the containing component is in a "loading" state, i.e. that the UI
 * displayed to the user is semantically equivalent to them seeing a spinner or a
 * loading indicator. This means that the UI is not in its final settled state yet.
 *
 * All components that are in a "loading" state should render a `<LoadingState>`
 * component, preferrably with an appropriate description.
 *
 * By itself, `<LoadingState>` doesn't do anything, but if used within `LoadingStateContext`,
 * it will call the provided `startLoading()`/`endLoading()` hooks when the component
 * is mounted/unmounted, which can be used to integrate existing latency instrumentation.
 */
const LoadingState = _ref => {
  let {
    description = 'Generic UI loading state'
  } = _ref;
  const uid = useStableUid();
  const loadingStateContext = useContext(LoadingStateContext);
  useLayoutEffect(() => {
    // mount
    if (loadingStateContext) {
      loadingStateContext.startLoading(uid, description);
    }
    return () => {
      // unmount
      if (loadingStateContext) {
        loadingStateContext.endLoading(uid);
      }
    };
  }, [uid, description, loadingStateContext]);
  return null;
};

const rotate = keyframes({
  '0%': {
    transform: 'rotate(0deg) translate3d(0, 0, 0)'
  },
  '100%': {
    transform: 'rotate(360deg) translate3d(0, 0, 0)'
  }
});
const cssSpinner = function (theme) {
  let frameRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;
  let delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  let animationDuration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  let inheritColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  const styles = {
    animation: `${rotate} ${animationDuration}s steps(${frameRate}, end) infinite`,
    ...(inheritColor ? {
      color: 'inherit'
    } : {
      color: theme.colors.textSecondary
    }),
    animationDelay: `${delay}s`,
    '@media only percy': {
      animation: 'none'
    }
  };
  return /*#__PURE__*/css(importantify(styles), process.env.NODE_ENV === "production" ? "" : ";label:cssSpinner;");
};
const Spinner = _ref => {
  let {
    frameRate,
    size = 'default',
    delay,
    className: propClass,
    label,
    animationDuration,
    inheritColor,
    loading = true,
    loadingDescription = 'Spinner',
    ...props
  } = _ref;
  const {
    classNamePrefix,
    theme
  } = useDesignSystemTheme();

  // We use Antd classes to keep styling unchanged
  // TODO(FEINF-1407): We want to move away from Antd classes and use Emotion for styling in the future
  const sizeSuffix = size === 'small' ? '-sm' : size === 'large' ? '-lg' : '';
  const sizeClass = sizeSuffix ? `${classNamePrefix}-spin${sizeSuffix}` : '';
  const wrapperClass = `${propClass || ''} ${classNamePrefix}-spin ${sizeClass} ${classNamePrefix}-spin-spinning ${DU_BOIS_ENABLE_ANIMATION_CLASSNAME}`.trim();
  const className = `${classNamePrefix}-spin-dot ${DU_BOIS_ENABLE_ANIMATION_CLASSNAME}`.trim();
  return (
    // className has to follow {...props}, otherwise is `css` prop is passed down it will overwrite our className
    jsxs("div", {
      ...props,
      className: wrapperClass,
      children: [loading && jsx(LoadingState, {
        description: loadingDescription
      }), jsx(AccessibleContainer, {
        label: label,
        children: jsx(LoadingIcon$1, {
          "aria-hidden": "false",
          css: cssSpinner(theme, frameRate, delay, animationDuration, inheritColor),
          className: className
        })
      })]
    })
  );
};

/**
 * Provides access to http://go/safex flags from the frontend. Note that this is a temporary
 * workaround until direct `safex` imports are available.
 * @param flag The name of the flag to check
 * @param defaultValue The default value to return if the flag is not set
 * @returns
 */
const safex = (flag, defaultValue) => {
  // Catching errors here, because we don't have type-safety to ensure
  // that `__debug__safex`'s API hasn't changed.
  try {
    const globalSafex = window.__debug__safex;
    return globalSafex ? globalSafex(flag, defaultValue) : defaultValue;
  } catch (e) {
    return defaultValue;
  }
};

function getEndIconClsName(theme) {
  return `${theme.general.iconfontCssPrefix}-btn-end-icon`;
}
const getButtonEmotionStyles = _ref => {
  let {
    theme,
    classNamePrefix,
    loading,
    withIcon,
    onlyIcon,
    isAnchor,
    enableAnimation,
    size,
    type,
    isFlex,
    useFocusPseudoClass,
    forceIconStyles,
    danger
  } = _ref;
  const clsIcon = `.${theme.general.iconfontCssPrefix}`;
  const clsEndIcon = `.${getEndIconClsName(theme)}`;
  const clsLoadingIcon = `.${classNamePrefix}-btn-loading-icon`;
  const clsIconOnly = `.${classNamePrefix}-btn-icon-only`;
  const classPrimary = `.${classNamePrefix}-btn-primary`;
  const classLink = `.${classNamePrefix}-btn-link`;
  const classDangerous = `.${classNamePrefix}-btn-dangerous`;
  const SMALL_BUTTON_HEIGHT = 24;
  const tertiaryColors = {
    background: theme.colors.actionTertiaryBackgroundDefault,
    color: theme.colors.actionTertiaryTextDefault,
    '&:hover': {
      background: theme.colors.actionTertiaryBackgroundHover,
      color: theme.colors.actionTertiaryTextHover
    },
    '&:active': {
      background: theme.colors.actionTertiaryBackgroundPress,
      color: theme.colors.actionTertiaryTextPress
    }
  };
  const iconCss = {
    fontSize: theme.general.iconFontSize,
    ...(!isFlex && {
      // verticalAlign used by AntD to move icon and label to center
      // TODO(schs): Try to move buttons to flexbox to solve this. Main problem is that flex-inline and inline-block
      //  behave differently (vertically align of multiple buttons is off). See https://codepen.io/qfactor/pen/JXVzBe
      verticalAlign: -4,
      ...(onlyIcon && {
        verticalAlign: -3
      }),
      // verticalAlign used by AntD to move icon and label to center
      // TODO(schs): Try to move buttons to flexbox to solve this. Main problem is that flex-inline and inline-block
      //  behave differently (vertically align of multiple buttons is off). See https://codepen.io/qfactor/pen/JXVzBe
      // Need to make sure not to apply this to regular buttons as it will offset the icons
      ...(!onlyIcon && {
        verticalAlign: -3
      })
    }),
    lineHeight: 0,
    ...(size === 'small' && {
      lineHeight: theme.typography.lineHeightSm,
      ...((onlyIcon || forceIconStyles) && {
        fontSize: 16,
        ...(isFlex && {
          height: 16
        })
      })
    })
  };
  const inactiveIconCss = {
    color: theme.colors.textSecondary
  };
  const endIconCssSelector = `span > ${clsEndIcon} > ${clsIcon}`;
  const styles = {
    lineHeight: theme.typography.lineHeightBase,
    boxShadow: 'none',
    height: theme.general.heightSm,
    ...(isFlex && {
      display: 'inline-flex',
      alignItems: 'center',
      justifyContent: 'center',
      verticalAlign: 'middle'
    }),
    ...(!onlyIcon && !forceIconStyles && {
      '&&': {
        padding: '4px 12px',
        ...(size === 'small' && {
          padding: '0 8px'
        })
      }
    }),
    ...((onlyIcon || forceIconStyles) && {
      width: theme.general.heightSm
    }),
    ...(size === 'small' && {
      height: SMALL_BUTTON_HEIGHT,
      lineHeight: theme.typography.lineHeightBase,
      ...((onlyIcon || forceIconStyles) && {
        width: SMALL_BUTTON_HEIGHT,
        paddingTop: 0,
        paddingBottom: 0,
        verticalAlign: 'middle'
      })
    }),
    '&:focus-visible': {
      outlineStyle: 'solid',
      outlineWidth: '2px',
      outlineOffset: '1px',
      outlineColor: theme.isDarkMode ? theme.colors.actionDefaultBorderFocus : theme.colors.primary
    },
    ...getDefaultStyles(theme, loading),
    [`&${classPrimary}`]: {
      ...getPrimaryStyles(theme)
    },
    [`&${classLink}`]: {
      ...getLinkStyles$1(theme),
      ...(type === 'link' && {
        padding: 'unset',
        height: 'auto',
        border: 'none',
        boxShadow: 'none',
        '&[disabled],&:hover': {
          background: 'none'
        }
      })
    },
    [`&${classDangerous}${classPrimary}`]: {
      ...getPrimaryDangerStyles(theme)
    },
    [`&${classDangerous}`]: {
      ...getSecondaryDangerStyles(theme)
    },
    [`&[disabled], &${classDangerous}:disabled`]: {
      ...getDisabledStyles(theme),
      ...((onlyIcon || forceIconStyles) && {
        backgroundColor: 'transparent',
        '&:hover': {
          backgroundColor: 'transparent'
        },
        '&:active': {
          backgroundColor: 'transparent'
        }
      })
    },
    [clsLoadingIcon]: {
      display: 'none'
    },
    // Loading styles
    ...(loading && {
      '::before': {
        opacity: 0
      },
      cursor: 'default',
      [`${clsLoadingIcon}`]: {
        ...(onlyIcon ? {
          // In case of only icon, the icon is already centered but vertically not aligned, this fixes that
          verticalAlign: 'middle'
        } : {
          // Position loading indicator in center
          // This would break vertical centering of loading circle when onlyIcon is true
          position: 'absolute'
        }),
        ...(!isFlex && !forceIconStyles && {
          // Normally we'd do `transform: translateX(-50%)` but `antd` crushes that with injected inline `style`.
          left: 'calc(50% - 7px)'
        }),
        // Re-enable animation for the loading spinner, since it can be disabled by the global animation CSS.
        svg: {
          animationDuration: '1s !important'
        }
      },
      [`& > ${clsLoadingIcon} .anticon`]: {
        paddingRight: 0 // to horizontally center icon
      },

      [`> :not(${clsLoadingIcon})`]: {
        // Hide all content except loading icon
        opacity: 0,
        visibility: 'hidden',
        // Add horizontal space for icon
        ...(withIcon && {
          paddingLeft: theme.general.iconFontSize + theme.spacing.xs
        })
      }
    }),
    // Icon styles
    [`> ${clsIcon} + span, > span + ${clsIcon}`]: {
      marginRight: 0,
      marginLeft: theme.spacing.xs
    },
    [`> ${clsIcon}`]: iconCss,
    [`> ${endIconCssSelector}`]: {
      ...iconCss,
      marginLeft: theme.spacing.sm
    },
    ...(!type && !danger && {
      [`&:enabled:not(:hover):not(:active) > ${clsIcon}`]: inactiveIconCss
    }),
    ...(!type && !danger && {
      [`&:enabled:not(:hover):not(:active) > ${endIconCssSelector}`]: inactiveIconCss
    }),
    // Disable animations
    [`&[${classNamePrefix}-click-animating-without-extra-node='true']::after`]: {
      display: 'none'
    },
    [`&${clsIconOnly}`]: {
      border: 'none',
      [`&:enabled:not(${classLink})`]: {
        ...tertiaryColors,
        color: theme.colors.textSecondary,
        '&:hover > .anticon': {
          color: tertiaryColors['&:hover'].color,
          ...(danger && {
            color: theme.colors.actionDangerDefaultTextHover
          })
        },
        '&:active > .anticon': {
          color: tertiaryColors['&:active'].color,
          ...(danger && {
            color: theme.colors.actionDangerDefaultTextPress
          })
        },
        ...(loading && {
          '&&, &:hover, &:active': {
            backgroundColor: 'transparent'
          }
        })
      },
      [`&:enabled:not(${classLink}) > .anticon`]: {
        color: theme.colors.textSecondary,
        ...(danger && {
          color: theme.colors.actionDangerDefaultTextDefault
        })
      },
      ...(isAnchor && {
        lineHeight: `${theme.general.heightSm}px`,
        ...getLinkStyles$1(theme),
        '&:disabled': {
          color: theme.colors.actionDisabledText
        }
      }),
      ...(loading && {
        '&&, &:hover, &:active': {
          backgroundColor: 'transparent'
        }
      }),
      '&[disabled]:hover': {
        backgroundColor: 'transparent'
      }
    },
    [`&:focus`]: {
      ...(useFocusPseudoClass && {
        outlineStyle: 'solid',
        outlineWidth: '2px',
        outlineOffset: '1px',
        outlineColor: theme.isDarkMode ? theme.colors.actionDefaultBorderFocus : theme.colors.primary
      }),
      [`${clsLoadingIcon}`]: {
        ...(onlyIcon && {
          // Mitigate wrong left offset for loading state with onlyIcon
          left: 0
        })
      }
    },
    ...(forceIconStyles && {
      padding: '0 6px',
      lineHeight: theme.typography.lineHeightSm,
      color: theme.colors.textSecondary,
      ...(loading && {
        '&&, &:hover, &:active': {
          backgroundColor: 'transparent',
          borderColor: theme.colors.actionDefaultBorderDefault
        },
        '&[disabled], &[disabled]:hover, &[disabled]:active': {
          backgroundColor: 'transparent',
          borderColor: 'transparent'
        }
      }),
      '& > span': {
        verticalAlign: -1,
        height: theme.general.heightSm / 2,
        width: theme.general.heightSm / 2
      },
      [`& > ${clsLoadingIcon} .anticon`]: {
        // left: `calc(50% - 6px)!important`,
        height: theme.general.heightSm / 2,
        width: theme.general.heightSm / 2,
        padding: 0
      }
    }),
    ...getAnimationCss(enableAnimation)
  };

  // Moved outside main style object because state & selector matching in the already existing object keys can create bugs and unwanted overwrites
  const typeStyles = {
    ...(type === 'tertiary' && {
      [`&:enabled:not(${clsIconOnly})`]: tertiaryColors,
      [`&${classLink}[disabled]`]: {
        ...getDisabledTertiaryStyles(theme)
      }
    })
  };
  const importantStyles = importantify(styles);
  const importantTypeStyles = importantify(typeStyles);
  return /*#__PURE__*/css(importantStyles, importantTypeStyles, process.env.NODE_ENV === "production" ? "" : ";label:getButtonEmotionStyles;");
};
const Button = /* #__PURE__ */(() => {
  const Button = /*#__PURE__*/forwardRef(function Button( // Keep size out of props passed to AntD to make deprecation and eventual removal have 0 impact
  _ref2, ref) {
    let {
      dangerouslySetAntdProps,
      children,
      size,
      type,
      loading,
      loadingDescription = 'Button',
      endIcon,
      onClick,
      dangerouslySetForceIconStyles,
      dangerouslyUseFocusPseudoClass,
      dangerouslyAppendWrapperCss,
      componentId,
      analyticsEvents,
      ...props
    } = _ref2;
    const {
      theme,
      classNamePrefix
    } = useDesignSystemTheme();
    const {
      USE_FLEX_BUTTON: flexOverride
    } = useDesignSystemFlags();
    const eventContext = useDesignSystemEventComponentCallbacks({
      componentType: DesignSystemEventProviderComponentTypes.Button,
      componentId,
      analyticsEvents: analyticsEvents !== null && analyticsEvents !== void 0 ? analyticsEvents : [DesignSystemEventProviderAnalyticsEventTypes.OnClick]
    });
    const flexSafex = safex('databricks.fe.designsystem.useFlexButtonStyles', false);
    const isFlex = flexOverride || flexSafex;
    const clsEndIcon = getEndIconClsName(theme);
    const loadingCls = `${classNamePrefix}-btn-loading-icon`;
    const buttonRef = useRef(null);
    useImperativeHandle(ref, () => buttonRef.current);

    // Needed to keep backwards compatibility and support existing unit tests
    useEffect(() => {
      if (buttonRef.current) {
        if (loading) {
          buttonRef.current.setAttribute('loading', 'true');
          buttonRef.current.classList.add(`${classNamePrefix}-btn-loading`);
        } else {
          buttonRef.current.setAttribute('loading', 'false');
          buttonRef.current.classList.remove(`${classNamePrefix}-btn-loading`);
        }
      }
    }, [loading, classNamePrefix]);
    const iconOnly = Boolean((props.icon || endIcon) && !children);
    const handleClick = event => {
      if (loading) {
        return;
      }
      eventContext.onClick();
      onClick === null || onClick === void 0 || onClick(event);
    };
    const loadingSpinner = jsx(Spinner, {
      className: loadingCls,
      animationDuration: 8,
      inheritColor: true,
      label: "loading",
      "aria-label": "loading",
      loadingDescription: loadingDescription,
      css: /*#__PURE__*/css({
        color: 'inherit !important',
        pointerEvents: 'none',
        ...(!iconOnly && !dangerouslySetForceIconStyles && {
          '.anticon': {
            verticalAlign: '-0.2em'
          }
        }),
        '[aria-hidden="true"]': {
          display: 'inline'
        }
      }, process.env.NODE_ENV === "production" ? "" : ";label:loadingSpinner;")
    });
    return jsx(DesignSystemAntDConfigProvider, {
      children: jsx(Button$1, {
        ...props,
        css: getButtonEmotionStyles({
          theme,
          classNamePrefix,
          loading: Boolean(loading),
          withIcon: Boolean(props.icon),
          onlyIcon: iconOnly,
          isAnchor: Boolean(props.href && !type),
          danger: Boolean(props.danger),
          enableAnimation: theme.options.enableAnimation,
          size: size || 'middle',
          type,
          isFlex,
          forceIconStyles: Boolean(dangerouslySetForceIconStyles),
          useFocusPseudoClass: Boolean(dangerouslyUseFocusPseudoClass)
        }),
        href: props.disabled ? undefined : props.href,
        ...dangerouslySetAntdProps,
        onClick: handleClick,
        icon: loading ? loadingSpinner : props.icon,
        ref: buttonRef,
        type: type === 'tertiary' ? 'link' : type,
        children: children && jsxs("span", {
          style: {
            visibility: loading ? 'hidden' : 'visible',
            ...(isFlex && {
              display: 'inline-flex',
              alignItems: 'center'
            }),
            ...dangerouslyAppendWrapperCss
          },
          children: [children, endIcon && jsx("span", {
            className: clsEndIcon,
            style: {
              ...(isFlex && {
                display: 'inline-flex',
                alignItems: 'center'
              })
            },
            children: endIcon
          })]
        })
      })
    });
  });

  // This is needed for other Ant components that wrap Button, such as Tooltip, to correctly
  // identify it as an Ant button.
  // This should be removed if the component is rewritten to no longer be a wrapper around Ant.
  // See: https://github.com/ant-design/ant-design/blob/6dd39c1f89b4d6632e6ed022ff1bc275ca1e0f1f/components/button/button.tsx#L291
  Button.__ANT_BUTTON = true;
  return Button;
})();

const {
  Text: AntDText$1
} = Typography$1;
function getTextEmotionStyles$1(theme, props) {
  return /*#__PURE__*/css({
    '&&': {
      display: 'block',
      fontSize: theme.typography.fontSizeSm,
      lineHeight: theme.typography.lineHeightSm,
      color: theme.colors.textSecondary,
      ...(props.withoutMargins && {
        '&&': {
          marginTop: 0,
          marginBottom: 0
        }
      })
    }
  }, process.env.NODE_ENV === "production" ? "" : ";label:getTextEmotionStyles;");
}
function Hint(userProps) {
  const {
    dangerouslySetAntdProps,
    bold,
    withoutMargins,
    color,
    ...props
  } = userProps;
  const {
    theme
  } = useDesignSystemTheme();
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(AntDText$1, {
      ...props,
      css: getTextEmotionStyles$1(theme, userProps),
      ...dangerouslySetAntdProps
    })
  });
}

const getLinkStyles = (theme, clsPrefix) => {
  const classTypography = `.${clsPrefix}-typography`;
  const styles = {
    [`&${classTypography}, &${classTypography}:focus`]: {
      color: theme.colors.actionTertiaryTextDefault
    },
    [`&${classTypography}:hover, &${classTypography}:hover .anticon`]: {
      color: theme.colors.actionTertiaryTextHover,
      textDecoration: 'underline'
    },
    [`&${classTypography}:active, &${classTypography}:active .anticon`]: {
      color: theme.colors.actionTertiaryTextPress,
      textDecoration: 'underline'
    },
    [`&${classTypography}:focus-visible`]: {
      textDecoration: 'underline'
    },
    '.anticon': {
      fontSize: 12,
      verticalAlign: 'baseline'
    }
  };
  return /*#__PURE__*/css(styles, process.env.NODE_ENV === "production" ? "" : ";label:getLinkStyles;");
};
const getEllipsisNewTabLinkStyles = () => {
  const styles = {
    paddingRight: 'calc(2px + 1em)',
    // 1em for icon
    position: 'relative'
  };
  return /*#__PURE__*/css(styles, process.env.NODE_ENV === "production" ? "" : ";label:getEllipsisNewTabLinkStyles;");
};
const getIconStyles = theme => {
  const styles = {
    marginLeft: 2,
    color: theme.colors.actionTertiaryTextDefault
  };
  return /*#__PURE__*/css(styles, process.env.NODE_ENV === "production" ? "" : ";label:getIconStyles;");
};
const getEllipsisIconStyles = useNewIcons => {
  const styles = {
    position: 'absolute',
    right: 0,
    bottom: 0,
    top: 0,
    display: 'flex',
    alignItems: 'center',
    ...(useNewIcons && {
      fontSize: 12
    })
  };
  return /*#__PURE__*/css(styles, process.env.NODE_ENV === "production" ? "" : ";label:getEllipsisIconStyles;");
};
const Link = /*#__PURE__*/forwardRef(function Link(_ref, ref) {
  let {
    dangerouslySetAntdProps,
    ...props
  } = _ref;
  const {
    children,
    openInNewTab,
    ...restProps
  } = props;
  const {
    theme,
    classNamePrefix
  } = useDesignSystemTheme();
  const newTabProps = {
    rel: 'noopener noreferrer',
    target: '_blank'
  };
  const linkProps = openInNewTab ? {
    ...restProps,
    ...newTabProps
  } : {
    ...restProps
  };
  const linkStyles = props.ellipsis && openInNewTab ? [getLinkStyles(theme, classNamePrefix), getEllipsisNewTabLinkStyles()] : getLinkStyles(theme, classNamePrefix);
  const iconStyles = props.ellipsis ? [getIconStyles(theme), getEllipsisIconStyles()] : getIconStyles(theme);
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsxs(Typography$1.Link, {
      "aria-disabled": linkProps.disabled,
      css: linkStyles,
      ref: ref,
      ...linkProps,
      ...dangerouslySetAntdProps,
      children: [children, openInNewTab ? jsx(NewWindowIcon$1, {
        css: iconStyles,
        ...newTabProps
      }) : null]
    })
  });
});

const {
  Paragraph: AntDParagraph
} = Typography$1;
function getParagraphEmotionStyles(theme, props) {
  return /*#__PURE__*/css({
    '&&': {
      fontSize: theme.typography.fontSizeBase,
      fontWeight: theme.typography.typographyRegularFontWeight,
      lineHeight: theme.typography.lineHeightBase,
      color: getTypographyColor(theme, props.color, theme.colors.textPrimary)
    },
    '& .anticon': {
      verticalAlign: 'text-bottom'
    }
  }, props.disabled && {
    '&&': {
      color: theme.colors.actionDisabledText
    }
  }, props.withoutMargins && {
    '&&': {
      marginTop: 0,
      marginBottom: 0
    }
  }, process.env.NODE_ENV === "production" ? "" : ";label:getParagraphEmotionStyles;");
}
function Paragraph(userProps) {
  const {
    dangerouslySetAntdProps,
    withoutMargins,
    color,
    ...props
  } = userProps;
  const {
    theme
  } = useDesignSystemTheme();
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(AntDParagraph, {
      ...props,
      className: props.className,
      css: getParagraphEmotionStyles(theme, userProps),
      ...dangerouslySetAntdProps
    })
  });
}

const {
  Text: AntDText
} = Typography$1;
function getTextEmotionStyles(theme, props) {
  return /*#__PURE__*/css({
    '&&': {
      fontSize: theme.typography.fontSizeBase,
      fontWeight: theme.typography.typographyRegularFontWeight,
      lineHeight: theme.typography.lineHeightBase,
      color: getTypographyColor(theme, props.color, theme.colors.textPrimary)
    }
  }, props.disabled && {
    '&&': {
      color: theme.colors.actionDisabledText
    }
  }, props.hint && {
    '&&': {
      fontSize: theme.typography.fontSizeSm,
      lineHeight: theme.typography.lineHeightSm
    }
  }, props.bold && {
    '&&': {
      fontSize: theme.typography.fontSizeBase,
      fontWeight: theme.typography.typographyBoldFontWeight,
      lineHeight: theme.typography.lineHeightBase
    }
  }, props.code && {
    '&& > code': {
      color: theme.colors.textPrimary,
      fontSize: theme.typography.fontSizeBase,
      lineHeight: theme.typography.lineHeightBase,
      background: theme.colors.typographyCodeBg,
      fontFamily: 'monospace',
      borderRadius: theme.borders.borderRadiusMd,
      padding: '2px 4px',
      border: 'unset',
      margin: 0
    }
  }, props.size && {
    '&&': (() => {
      switch (props.size) {
        case 'xxl':
          return {
            fontSize: theme.typography.fontSizeXxl,
            lineHeight: theme.typography.lineHeightXxl,
            '& .anticon': {
              lineHeight: theme.typography.lineHeightXxl,
              verticalAlign: 'middle'
            }
          };
        case 'xl':
          return {
            fontSize: theme.typography.fontSizeXl,
            lineHeight: theme.typography.lineHeightXl,
            '& .anticon': {
              lineHeight: theme.typography.lineHeightXl,
              verticalAlign: 'middle'
            }
          };
        case 'lg':
          return {
            fontSize: theme.typography.fontSizeLg,
            lineHeight: theme.typography.lineHeightLg,
            '& .anticon': {
              lineHeight: theme.typography.lineHeightLg,
              verticalAlign: 'middle'
            }
          };
        case 'sm':
          return {
            fontSize: theme.typography.fontSizeSm,
            lineHeight: theme.typography.lineHeightSm,
            '& .anticon': {
              verticalAlign: '-0.219em'
            }
          };
        default:
          return {};
      }
    })()
  }, props.withoutMargins && {
    '&&': {
      marginTop: 0,
      marginBottom: 0
    }
  }, process.env.NODE_ENV === "production" ? "" : ";label:getTextEmotionStyles;");
}
function Text(userProps) {
  // Omit props that are not supported by `antd`
  const {
    dangerouslySetAntdProps,
    bold,
    hint,
    withoutMargins,
    color,
    ...props
  } = userProps;
  const {
    theme
  } = useDesignSystemTheme();
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(AntDText, {
      ...props,
      className: props.className,
      css: getTextEmotionStyles(theme, userProps),
      ...dangerouslySetAntdProps
    })
  });
}

const {
  Title: AntDTitle
} = Typography$1;
function getLevelStyles(theme, props) {
  switch (props.level) {
    case 1:
      return /*#__PURE__*/css({
        '&&': {
          fontSize: theme.typography.fontSizeXxl,
          lineHeight: theme.typography.lineHeightXxl,
          fontWeight: theme.typography.typographyBoldFontWeight
        },
        '& > .anticon': {
          lineHeight: theme.typography.lineHeightXxl
        }
      }, process.env.NODE_ENV === "production" ? "" : ";label:getLevelStyles;");
    case 2:
      return /*#__PURE__*/css({
        '&&': {
          fontSize: theme.typography.fontSizeXl,
          lineHeight: theme.typography.lineHeightXl,
          fontWeight: theme.typography.typographyBoldFontWeight
        },
        '& > .anticon': {
          lineHeight: theme.typography.lineHeightXl
        }
      }, process.env.NODE_ENV === "production" ? "" : ";label:getLevelStyles;");
    case 3:
      return /*#__PURE__*/css({
        '&&': {
          fontSize: theme.typography.fontSizeLg,
          lineHeight: theme.typography.lineHeightLg,
          fontWeight: theme.typography.typographyBoldFontWeight
        },
        '& > .anticon': {
          lineHeight: theme.typography.lineHeightLg
        }
      }, process.env.NODE_ENV === "production" ? "" : ";label:getLevelStyles;");
    case 4:
    default:
      return /*#__PURE__*/css({
        '&&': {
          fontSize: theme.typography.fontSizeMd,
          lineHeight: theme.typography.lineHeightMd,
          fontWeight: theme.typography.typographyBoldFontWeight
        },
        '& > .anticon': {
          lineHeight: theme.typography.lineHeightMd
        }
      }, process.env.NODE_ENV === "production" ? "" : ";label:getLevelStyles;");
  }
}
function getTitleEmotionStyles(theme, props) {
  return /*#__PURE__*/css(getLevelStyles(theme, props), {
    '&&': {
      color: getTypographyColor(theme, props.color, theme.colors.textPrimary)
    },
    '& > .anticon': {
      verticalAlign: 'middle'
    }
  }, props.withoutMargins && {
    '&&': {
      marginTop: '0 !important',
      // override general styling
      marginBottom: '0 !important' // override general styling
    }
  }, process.env.NODE_ENV === "production" ? "" : ";label:getTitleEmotionStyles;");
}
function Title(userProps) {
  const {
    dangerouslySetAntdProps,
    withoutMargins,
    color,
    ...props
  } = userProps;
  const {
    theme
  } = useDesignSystemTheme();
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(AntDTitle, {
      ...props,
      className: props.className,
      css: getTitleEmotionStyles(theme, userProps),
      ...dangerouslySetAntdProps
    })
  });
}

const Typography = /* #__PURE__ */(() => {
  function Typography(_ref) {
    let {
      dangerouslySetAntdProps,
      ...props
    } = _ref;
    return jsx(DesignSystemAntDConfigProvider, {
      children: jsx(Typography$1, {
        ...props,
        ...dangerouslySetAntdProps
      })
    });
  }
  Typography.Text = Text;
  Typography.Title = Title;
  Typography.Paragraph = Paragraph;
  Typography.Link = Link;
  Typography.Hint = Hint;
  return Typography;
})();

const getInputGroupStyling = (clsPrefix, theme) => {
  const inputClass = `.${clsPrefix}-input`;
  const buttonClass = `.${clsPrefix}-btn`;
  return /*#__PURE__*/css({
    display: 'inline-flex !important',
    width: 'auto',
    [`& > ${inputClass}`]: {
      flexGrow: 1,
      '&:disabled': {
        border: 'none',
        '&:hover': {
          borderRight: `1px solid ${theme.colors.actionDisabledText} !important`
        }
      }
    },
    [`& > ${buttonClass} > span`]: {
      verticalAlign: 'middle'
    },
    [`& > ${buttonClass}:disabled, & > ${buttonClass}:disabled:hover`]: {
      borderLeft: `1px solid ${theme.colors.actionDisabledText} !important`
    }
  }, process.env.NODE_ENV === "production" ? "" : ";label:getInputGroupStyling;");
};
const Group = _ref => {
  let {
    dangerouslySetAntdProps,
    dangerouslyAppendEmotionCSS,
    compact = true,
    ...props
  } = _ref;
  const {
    classNamePrefix,
    theme
  } = useDesignSystemTheme();
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(Input$2.Group, {
      css: [getInputGroupStyling(classNamePrefix, theme), dangerouslyAppendEmotionCSS, process.env.NODE_ENV === "production" ? "" : ";label:Group;"],
      compact: compact,
      ...props,
      ...dangerouslySetAntdProps
    })
  });
};

/**
 * A React custom hook that allows a callback function to be executed exactly once until it is explicitly reset.
 *
 * Usage:
 *
 * const originalCallback = () => { console.log('originalCallback'); }
 * const { callbackOnceUntilReset, reset } = useCallbackOnceUntilReset(originalCallback);
 *
 * // To execute the callback
 * callbackOnceUntilReset(); // Prints 'originalCallback'
 * callbackOnceUntilReset(); // No effect for further calls
 * reset();
 * callbackOnceUntilReset(); // Prints 'originalCallback' again
 */
const useCallbackOnceUntilReset = callback => {
  const canTriggerRef = useRef(true);
  const reset = useCallback(() => {
    canTriggerRef.current = true;
  }, []);
  const callbackOnceUntilReset = useCallback(() => {
    if (canTriggerRef.current) {
      callback();
      canTriggerRef.current = false;
    }
  }, [callback]);
  return {
    callbackOnceUntilReset,
    reset
  };
};

const getInputStyles = (clsPrefix, theme, _ref, _ref2) => {
  let {
    validationState
  } = _ref;
  let {
    useTransparent = false,
    useFocusWithin = false
  } = _ref2;
  const inputClass = `.${clsPrefix}-input`;
  const affixClass = `.${clsPrefix}-input-affix-wrapper`;
  const affixClassFocused = `.${clsPrefix}-input-affix-wrapper-focused`;
  const clearIcon = `.${clsPrefix}-input-clear-icon`;
  const prefixIcon = `.${clsPrefix}-input-prefix`;
  const suffixIcon = `.${clsPrefix}-input-suffix`;
  const validationColor = getValidationStateColor(theme, validationState);
  const focusSpecifier = useFocusWithin ? 'focus-within' : 'focus';
  const styles = {
    '&&': {
      lineHeight: theme.typography.lineHeightBase,
      minHeight: theme.general.heightSm,
      ...(validationState && {
        borderColor: validationColor
      }),
      '&:hover': {
        borderColor: validationState ? validationColor : theme.colors.actionPrimaryBackgroundHover
      },
      [`&:${focusSpecifier}`]: {
        outlineColor: validationState ? validationColor : theme.colors.actionPrimaryBackgroundDefault,
        outlineWidth: 2,
        outlineOffset: -2,
        outlineStyle: 'solid',
        boxShadow: 'none',
        borderColor: 'transparent'
      },
      '&:disabled': {
        backgroundColor: theme.colors.actionDisabledBackground,
        color: theme.colors.actionDisabledText
      },
      '&::placeholder': {
        color: theme.colors.textPlaceholder
      }
    },
    [`&${inputClass}, ${inputClass}`]: {
      ...(useTransparent && {
        backgroundColor: 'transparent'
      })
    },
    [`&${affixClass}`]: {
      ...(useTransparent && {
        backgroundColor: 'transparent'
      }),
      lineHeight: theme.typography.lineHeightBase,
      paddingTop: 5,
      paddingBottom: 5,
      minHeight: theme.general.heightSm,
      '::before': {
        lineHeight: theme.typography.lineHeightBase
      },
      '&:hover': {
        borderColor: theme.colors.actionPrimaryBackgroundHover
      },
      [`input.${clsPrefix}-input`]: {
        borderRadius: 0
      }
    },
    [`&${affixClassFocused}`]: {
      boxShadow: 'none',
      [`&&, &:${focusSpecifier}`]: {
        outlineColor: theme.colors.actionPrimaryBackgroundDefault,
        outlineWidth: 2,
        outlineOffset: -2,
        outlineStyle: 'solid',
        boxShadow: 'none',
        borderColor: 'transparent'
      }
    },
    [clearIcon]: {
      fontSize: theme.typography.fontSizeSm
    },
    [prefixIcon]: {
      marginRight: theme.spacing.sm,
      color: theme.colors.textSecondary
    },
    [suffixIcon]: {
      marginLeft: theme.spacing.sm,
      color: theme.colors.textSecondary
    },
    ...getAnimationCss(theme.options.enableAnimation)
  };
  return styles;
};
const getInputEmotionStyles = (clsPrefix, theme, _ref3, useTransparent) => {
  let {
    validationState
  } = _ref3;
  const styles = getInputStyles(clsPrefix, theme, {
    validationState
  }, {
    useTransparent
  });
  return /*#__PURE__*/css(importantify(styles), process.env.NODE_ENV === "production" ? "" : ";label:getInputEmotionStyles;");
};
const Input$1 = /*#__PURE__*/forwardRef(function Input(_ref4, ref) {
  let {
    validationState,
    autoComplete = 'off',
    dangerouslySetAntdProps,
    dangerouslyAppendEmotionCSS,
    onChange,
    onClear,
    onFocus,
    componentId,
    analyticsEvents,
    ...props
  } = _ref4;
  const {
    classNamePrefix,
    theme
  } = useDesignSystemTheme();
  const useTransparent = safex('databricks.fe.designsystem.useTransparentInput', false);
  const eventContext = useDesignSystemEventComponentCallbacks({
    componentType: DesignSystemEventProviderComponentTypes.Input,
    componentId,
    analyticsEvents: analyticsEvents !== null && analyticsEvents !== void 0 ? analyticsEvents : [DesignSystemEventProviderAnalyticsEventTypes.OnValueChange]
  });

  // Prevents multiple onValueChange triggers until after a focus event resets it.
  const {
    callbackOnceUntilReset: sendAnalyticsEventOncePerFocus,
    reset: resetSendAnalyticsEventOnFocus
  } = useCallbackOnceUntilReset(eventContext.onValueChange);
  const handleChange = e => {
    sendAnalyticsEventOncePerFocus();
    // If the input is cleared, call the onClear handler, but only
    // if the event is not an input event -- which is the case when you click the
    // ant-provided (X) button.
    if (!e.target.value && e.nativeEvent instanceof InputEvent === false && onClear) {
      onClear === null || onClear === void 0 || onClear();
    } else {
      onChange === null || onChange === void 0 || onChange(e);
    }
  };
  const handleFocus = e => {
    resetSendAnalyticsEventOnFocus();
    onFocus === null || onFocus === void 0 || onFocus(e);
  };
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(Input$2, {
      autoComplete: autoComplete,
      ref: ref,
      css: [getInputEmotionStyles(classNamePrefix, theme, {
        validationState
      }, useTransparent), dangerouslyAppendEmotionCSS, process.env.NODE_ENV === "production" ? "" : ";label:Input;"],
      onChange: handleChange,
      onFocus: handleFocus,
      ...props,
      ...dangerouslySetAntdProps
    })
  });
});

const Password = /*#__PURE__*/forwardRef(function Password(_ref, ref) {
  let {
    validationState,
    autoComplete = 'off',
    dangerouslySetAntdProps,
    dangerouslyAppendEmotionCSS,
    ...props
  } = _ref;
  const {
    classNamePrefix,
    theme
  } = useDesignSystemTheme();
  const useTransparent = safex('databricks.fe.designsystem.useTransparentInput', false);
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(Input$2.Password, {
      visibilityToggle: false,
      ref: ref,
      autoComplete: autoComplete,
      css: [getInputEmotionStyles(classNamePrefix, theme, {
        validationState
      }, useTransparent), dangerouslyAppendEmotionCSS, process.env.NODE_ENV === "production" ? "" : ";label:Password;"],
      ...props,
      ...dangerouslySetAntdProps
    })
  });
});

const TextArea = /*#__PURE__*/forwardRef(function TextArea(_ref, ref) {
  let {
    validationState,
    autoComplete = 'off',
    dangerouslySetAntdProps,
    dangerouslyAppendEmotionCSS,
    ...props
  } = _ref;
  const {
    classNamePrefix,
    theme
  } = useDesignSystemTheme();
  const useTransparent = safex('databricks.fe.designsystem.useTransparentInput', false);
  return jsx(DesignSystemAntDConfigProvider, {
    children: jsx(Input$2.TextArea, {
      ref: ref,
      autoComplete: autoComplete,
      css: [getInputEmotionStyles(classNamePrefix, theme, {
        validationState
      }, useTransparent), dangerouslyAppendEmotionCSS, process.env.NODE_ENV === "production" ? "" : ";label:TextArea;"],
      ...props,
      ...dangerouslySetAntdProps
    })
  });
});

// Properly creates the namespace and dot-notation components with correct types.
const InputNamespace = /* #__PURE__ */Object.assign(Input$1, {
  TextArea,
  Password,
  Group
});
const Input = InputNamespace;

function Stepper(_ref) {
  let {
    direction: requestedDirection,
    currentStepIndex: currentStep,
    steps,
    localizeStepNumber,
    responsive = true
  } = _ref;
  const {
    theme
  } = useDesignSystemTheme();
  const ref = useRef(null);
  const {
    direction
  } = useResponsiveDirection({
    ref,
    requestedDirection,
    responsive,
    enabled: steps.length > 0
  });
  if (steps.length === 0) {
    return null;
  }
  const isHorizontal = direction === 'horizontal';
  const currentStepIndex = currentStep ? Math.min(steps.length - 1, Math.max(0, currentStep)) : 0;
  return jsx("ol", {
    css: /*#__PURE__*/css(getStepsStyle(theme, isHorizontal), process.env.NODE_ENV === "production" ? "" : ";label:Stepper;"),
    ref: ref,
    children: steps.map((step, index) => {
      const isCurrentStep = index === currentStepIndex;
      const isLastStep = index === steps.length - 1;
      const displayEndingDivider = !isLastStep;
      const contentTitleLevel = isCurrentStep ? 3 : 4;
      const StepIcon = step.icon;
      const {
        icon,
        iconBackgroundColor,
        iconTextColor,
        titleTextColor,
        descriptionTextColor,
        hasStepItemIconBorder
      } = getStepContentStyleFields(theme, isCurrentStep, step.status, StepIcon);
      return jsx("li", {
        "aria-current": isCurrentStep,
        css: /*#__PURE__*/css(getStepItemStyle(theme, isHorizontal, isLastStep)),
        children: jsxs(StepContentGrid, {
          isHorizontal: isHorizontal,
          isCurrentStep: isCurrentStep,
          children: [jsx("div", {
            css: /*#__PURE__*/css(getStepItemIconParentStyle(theme, isCurrentStep, iconBackgroundColor, hasStepItemIconBorder)),
            children: StepIcon ? jsx(StepIcon, {
              statusColor: iconTextColor,
              status: step.status
            }) : icon ? jsx("span", {
              css: /*#__PURE__*/css({
                color: iconTextColor
              }),
              children: icon
            }) : jsx(Typography.Title, {
              level: contentTitleLevel,
              css: /*#__PURE__*/css({
                color: `${iconTextColor} !important`
              }),
              withoutMargins: true,
              children: localizeStepNumber(index + 1)
            })
          }), jsx(Typography.Title, {
            level: contentTitleLevel,
            withoutMargins: true,
            css: /*#__PURE__*/css({
              flexShrink: 0,
              color: `${titleTextColor} !important`
            }),
            children: step.title
          }), displayEndingDivider && jsx("div", {
            css: /*#__PURE__*/css(getStepEndingDividerStyles(theme, isHorizontal, isCurrentStep))
          }), step.description && jsx(Typography.Text, {
            css: /*#__PURE__*/css(getStepDescriptionStyles(theme, isHorizontal, isLastStep, descriptionTextColor)),
            withoutMargins: true,
            size: "sm",
            children: step.description
          })]
        })
      }, index);
    })
  });
}
function getStepsStyle(theme, isHorizontal) {
  return /*#__PURE__*/css({
    listStyle: 'none',
    display: 'flex',
    flexDirection: isHorizontal ? 'row' : 'column',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    gap: isHorizontal ? theme.spacing.md : theme.spacing.sm,
    width: '100%',
    margin: '0',
    padding: '0'
  }, process.env.NODE_ENV === "production" ? "" : ";label:getStepsStyle;");
}
function getStepItemStyle(theme, isHorizontal, isLastStep) {
  return /*#__PURE__*/css({
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-start',
    flexGrow: isLastStep ? 0 : 1,
    marginRight: isLastStep ? theme.spacing.lg + theme.spacing.md : 0,
    width: isHorizontal ? undefined : '100%'
  }, process.env.NODE_ENV === "production" ? "" : ";label:getStepItemStyle;");
}
function getStepContentStyleFields(theme, isCurrentStep, status, icon) {
  const fields = getStepContentStyleFieldsFromStatus(theme, isCurrentStep, status);
  if (icon) {
    return {
      ...fields,
      icon: undefined,
      iconBackgroundColor: undefined,
      iconTextColor: getCustomIconColor(theme, isCurrentStep, status),
      hasStepItemIconBorder: false
    };
  }
  return fields;
}
function getCustomIconColor(theme, isCurrentStep, status) {
  switch (status) {
    case 'completed':
      return theme.colors.actionDefaultBackgroundPress;
    case 'loading':
      return theme.colors.textPlaceholder;
    case 'error':
      return theme.colors.textValidationDanger;
    default:
    case 'upcoming':
      return isCurrentStep ? theme.colors.actionLinkDefault : theme.colors.textPlaceholder;
  }
}
function getStepContentStyleFieldsFromStatus(theme, isCurrentStep, status) {
  switch (status) {
    case 'completed':
      return {
        icon: jsx(CheckIcon$1, {}),
        iconBackgroundColor: theme.colors.actionDefaultBackgroundPress,
        iconTextColor: theme.colors.textPlaceholder,
        titleTextColor: theme.colors.textPrimary,
        descriptionTextColor: theme.colors.textSecondary,
        hasStepItemIconBorder: true
      };
    case 'loading':
      return {
        icon: jsx(LoadingIcon$1, {
          spin: true,
          css: /*#__PURE__*/css({
            fontSize: isCurrentStep ? theme.typography.fontSizeXl : theme.typography.fontSizeLg
          }, process.env.NODE_ENV === "production" ? "" : ";label:icon;")
        }),
        iconBackgroundColor: undefined,
        iconTextColor: theme.colors.textPlaceholder,
        titleTextColor: isCurrentStep ? theme.colors.textPrimary : theme.colors.textSecondary,
        descriptionTextColor: theme.colors.textSecondary,
        hasStepItemIconBorder: false
      };
    case 'error':
      return {
        icon: jsx(CloseIcon$1, {
          css: /*#__PURE__*/css({
            marginBottom: theme.spacing.sm /* center icon in icon circle */
          }, process.env.NODE_ENV === "production" ? "" : ";label:icon;")
        }),
        iconBackgroundColor: theme.colors.textValidationDanger,
        iconTextColor: 'white',
        titleTextColor: theme.colors.textValidationDanger,
        descriptionTextColor: theme.colors.textValidationDanger,
        hasStepItemIconBorder: false
      };
    default:
    case 'upcoming':
      if (isCurrentStep) {
        return {
          icon: undefined,
          iconBackgroundColor: theme.colors.actionLinkDefault,
          iconTextColor: 'white',
          titleTextColor: theme.colors.textPrimary,
          descriptionTextColor: theme.colors.textPrimary,
          hasStepItemIconBorder: false
        };
      }
      return {
        icon: undefined,
        iconBackgroundColor: undefined,
        iconTextColor: theme.colors.textPlaceholder,
        titleTextColor: theme.colors.textSecondary,
        descriptionTextColor: theme.colors.textSecondary,
        hasStepItemIconBorder: true
      };
  }
}
const MaxHorizontalStepDescriptionWidth = 140;
const CurrentStepIconSize = DEFAULT_SPACING_UNIT * 4;
const NonCurrentStepIconSize = DEFAULT_SPACING_UNIT * 3;
function getStepItemIconParentStyle(theme, isCurrentStep, iconBackgroundColor, hasStepItemIconBorder) {
  return /*#__PURE__*/css({
    width: isCurrentStep ? CurrentStepIconSize : NonCurrentStepIconSize,
    height: isCurrentStep ? CurrentStepIconSize : NonCurrentStepIconSize,
    backgroundColor: iconBackgroundColor,
    borderRadius: '50%',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    fontSize: '20px',
    flexShrink: 0,
    border: hasStepItemIconBorder ? `1px solid ${theme.colors.textPlaceholder}` : undefined
  }, process.env.NODE_ENV === "production" ? "" : ";label:getStepItemIconParentStyle;");
}
function getStepEndingDividerStyles(theme, isHorizontal, isCurrentStep) {
  const backgroundColor = isCurrentStep ? theme.colors.actionLinkDefault : theme.colors.border;
  if (isHorizontal) {
    return /*#__PURE__*/css({
      backgroundColor,
      height: '1px',
      width: '100%',
      minWidth: theme.spacing.md
    }, process.env.NODE_ENV === "production" ? "" : ";label:getStepEndingDividerStyles;");
  }
  return /*#__PURE__*/css({
    backgroundColor,
    height: '100%',
    minHeight: theme.spacing.md,
    width: '1px',
    alignSelf: 'flex-start',
    marginLeft: theme.spacing.md
  }, process.env.NODE_ENV === "production" ? "" : ";label:getStepEndingDividerStyles;");
}
function getStepDescriptionStyles(theme, isHorizontal, isLastStep, textColor) {
  return /*#__PURE__*/css({
    alignSelf: 'flex-start',
    width: '100%',
    gridColumn: isHorizontal || isLastStep ? '2 / span 2' : undefined,
    maxWidth: isHorizontal ? MaxHorizontalStepDescriptionWidth : undefined,
    paddingBottom: isHorizontal ? undefined : theme.spacing.sm,
    color: `${textColor} !important`
  }, process.env.NODE_ENV === "production" ? "" : ";label:getStepDescriptionStyles;");
}
function StepContentGrid(_ref2) {
  let {
    children,
    isHorizontal,
    isCurrentStep
  } = _ref2;
  const {
    theme
  } = useDesignSystemTheme();
  if (isHorizontal) {
    return jsx("div", {
      css: /*#__PURE__*/css({
        display: 'grid',
        gridTemplateColumns: `${isCurrentStep ? CurrentStepIconSize : NonCurrentStepIconSize}px fit-content(100%) 1fr`,
        gridTemplateRows: `${CurrentStepIconSize}px auto`,
        alignItems: 'center',
        justifyItems: 'flex-start',
        gridColumnGap: theme.spacing.sm,
        gridRowGap: theme.spacing.sm,
        width: '100%'
      }, process.env.NODE_ENV === "production" ? "" : ";label:StepContentGrid;"),
      children: children
    });
  }
  return jsx("div", {
    css: /*#__PURE__*/css({
      display: 'grid',
      gridTemplateColumns: `${CurrentStepIconSize}px auto`,
      alignItems: 'center',
      justifyItems: 'flex-start',
      gridColumnGap: theme.spacing.md,
      gridRowGap: theme.spacing.sm,
      width: '100%',
      '& > :first-child': {
        // horizontally center the first column (circle/icon)
        justifySelf: 'center'
      }
    }, process.env.NODE_ENV === "production" ? "" : ";label:StepContentGrid;"),
    children: children
  });
}

// Ant design uses the same value for their stepper and to works well for us as well.
const MinimumHorizonalDirectionWidth = 532;

// exported for unit test
function useResponsiveDirection(_ref3) {
  let {
    requestedDirection = 'horizontal',
    responsive,
    enabled,
    ref
  } = _ref3;
  const [direction, setDirection] = useState(requestedDirection);
  useEffect(() => {
    if (requestedDirection === 'vertical' || !enabled || !responsive || !ref.current) {
      return;
    }
    let timeoutId;
    const resizeObserver = new ResizeObserver(entries => {
      timeoutId = requestAnimationFrame(() => {
        if (entries.length === 1) {
          const width = entries[0].target.clientWidth || 0;
          setDirection(width < MinimumHorizonalDirectionWidth ? 'vertical' : 'horizontal');
        }
      });
    });
    if (ref.current) {
      resizeObserver.observe(ref.current);
    }
    return () => {
      resizeObserver.disconnect();
      cancelAnimationFrame(timeoutId);
    };
  }, [requestedDirection, enabled, ref, responsive]);
  return {
    direction
  };
}

export { getInputStyles as $, ApplyDesignSystemContextOverrides as A, Button as B, CloseIcon$1 as C, DesignSystemAntDConfigProvider as D, DesignSystemEventProviderComponentTypes as E, DesignSystemEventProviderAnalyticsEventTypes as F, useDesignSystemEventComponentCallbacks as G, DesignSystemEventProvider as H, Icon as I, DesignSystemThemeContext as J, DesignSystemContext as K, LoadingState as L, DesignSystemThemeProvider as M, DesignSystemProvider as N, ApplyDesignSystemFlags as O, useAntDConfigProviderContext as P, WithDesignSystemThemeHoc as Q, RestoreAntDDefaultClsPrefix as R, Spinner as S, Typography as T, CursorIcon$1 as U, FaceFrownIcon$1 as V, WarningIcon$1 as W, FaceNeutralIcon$1 as X, FaceSmileIcon$1 as Y, MegaphoneIcon$1 as Z, NewWindowIcon$1 as _, getDarkModePortalStyles as a, LoadingStateContext as a0, getTypographyColor as a1, getBottomOnlyShadowScrollStyles as a2, ColorVars as a3, primitiveColors as a4, ChevronRightIcon$1 as b, useUniqueId as c, useDesignSystemContext as d, CheckIcon$1 as e, Input as f, getAnimationCss as g, getValidationStateColor as h, importantify as i, getShadowScrollStyles as j, DangerIcon$1 as k, LoadingIcon$1 as l, Title as m, AccessibleContainer as n, ChevronLeftIcon$1 as o, DU_BOIS_ENABLE_ANIMATION_CLASSNAME as p, lightColorList as q, getDefaultStyles as r, safex as s, getPrimaryStyles as t, useDesignSystemTheme as u, visuallyHidden as v, getDisabledStyles as w, useDesignSystemFlags as x, Stepper as y, getButtonEmotionStyles as z };
//# sourceMappingURL=Stepper-456afc57.js.map
